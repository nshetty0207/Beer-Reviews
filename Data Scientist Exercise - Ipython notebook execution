{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Importing all the needed Packages \n",
    "import pandas as pd\n",
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "%matplotlib inline\n",
    "import seaborn as sns"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Exploratory Data Analysis"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>brewery_id</th>\n",
       "      <th>brewery_name</th>\n",
       "      <th>review_time</th>\n",
       "      <th>review_overall</th>\n",
       "      <th>review_aroma</th>\n",
       "      <th>review_appearance</th>\n",
       "      <th>review_profilename</th>\n",
       "      <th>beer_style</th>\n",
       "      <th>review_palate</th>\n",
       "      <th>review_taste</th>\n",
       "      <th>beer_name</th>\n",
       "      <th>beer_abv</th>\n",
       "      <th>beer_beerid</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>10325</td>\n",
       "      <td>Vecchio Birraio</td>\n",
       "      <td>1234817823</td>\n",
       "      <td>1.5</td>\n",
       "      <td>2.0</td>\n",
       "      <td>2.5</td>\n",
       "      <td>stcules</td>\n",
       "      <td>Hefeweizen</td>\n",
       "      <td>1.5</td>\n",
       "      <td>1.5</td>\n",
       "      <td>Sausa Weizen</td>\n",
       "      <td>5.0</td>\n",
       "      <td>47986</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>10325</td>\n",
       "      <td>Vecchio Birraio</td>\n",
       "      <td>1235915097</td>\n",
       "      <td>3.0</td>\n",
       "      <td>2.5</td>\n",
       "      <td>3.0</td>\n",
       "      <td>stcules</td>\n",
       "      <td>English Strong Ale</td>\n",
       "      <td>3.0</td>\n",
       "      <td>3.0</td>\n",
       "      <td>Red Moon</td>\n",
       "      <td>6.2</td>\n",
       "      <td>48213</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>10325</td>\n",
       "      <td>Vecchio Birraio</td>\n",
       "      <td>1235916604</td>\n",
       "      <td>3.0</td>\n",
       "      <td>2.5</td>\n",
       "      <td>3.0</td>\n",
       "      <td>stcules</td>\n",
       "      <td>Foreign / Export Stout</td>\n",
       "      <td>3.0</td>\n",
       "      <td>3.0</td>\n",
       "      <td>Black Horse Black Beer</td>\n",
       "      <td>6.5</td>\n",
       "      <td>48215</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>10325</td>\n",
       "      <td>Vecchio Birraio</td>\n",
       "      <td>1234725145</td>\n",
       "      <td>3.0</td>\n",
       "      <td>3.0</td>\n",
       "      <td>3.5</td>\n",
       "      <td>stcules</td>\n",
       "      <td>German Pilsener</td>\n",
       "      <td>2.5</td>\n",
       "      <td>3.0</td>\n",
       "      <td>Sausa Pils</td>\n",
       "      <td>5.0</td>\n",
       "      <td>47969</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>1075</td>\n",
       "      <td>Caldera Brewing Company</td>\n",
       "      <td>1293735206</td>\n",
       "      <td>4.0</td>\n",
       "      <td>4.5</td>\n",
       "      <td>4.0</td>\n",
       "      <td>johnmichaelsen</td>\n",
       "      <td>American Double / Imperial IPA</td>\n",
       "      <td>4.0</td>\n",
       "      <td>4.5</td>\n",
       "      <td>Cauldron DIPA</td>\n",
       "      <td>7.7</td>\n",
       "      <td>64883</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>1075</td>\n",
       "      <td>Caldera Brewing Company</td>\n",
       "      <td>1325524659</td>\n",
       "      <td>3.0</td>\n",
       "      <td>3.5</td>\n",
       "      <td>3.5</td>\n",
       "      <td>oline73</td>\n",
       "      <td>Herbed / Spiced Beer</td>\n",
       "      <td>3.0</td>\n",
       "      <td>3.5</td>\n",
       "      <td>Caldera Ginger Beer</td>\n",
       "      <td>4.7</td>\n",
       "      <td>52159</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>1075</td>\n",
       "      <td>Caldera Brewing Company</td>\n",
       "      <td>1318991115</td>\n",
       "      <td>3.5</td>\n",
       "      <td>3.5</td>\n",
       "      <td>3.5</td>\n",
       "      <td>Reidrover</td>\n",
       "      <td>Herbed / Spiced Beer</td>\n",
       "      <td>4.0</td>\n",
       "      <td>4.0</td>\n",
       "      <td>Caldera Ginger Beer</td>\n",
       "      <td>4.7</td>\n",
       "      <td>52159</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>1075</td>\n",
       "      <td>Caldera Brewing Company</td>\n",
       "      <td>1306276018</td>\n",
       "      <td>3.0</td>\n",
       "      <td>2.5</td>\n",
       "      <td>3.5</td>\n",
       "      <td>alpinebryant</td>\n",
       "      <td>Herbed / Spiced Beer</td>\n",
       "      <td>2.0</td>\n",
       "      <td>3.5</td>\n",
       "      <td>Caldera Ginger Beer</td>\n",
       "      <td>4.7</td>\n",
       "      <td>52159</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   brewery_id             brewery_name  review_time  review_overall  \\\n",
       "0       10325          Vecchio Birraio   1234817823             1.5   \n",
       "1       10325          Vecchio Birraio   1235915097             3.0   \n",
       "2       10325          Vecchio Birraio   1235916604             3.0   \n",
       "3       10325          Vecchio Birraio   1234725145             3.0   \n",
       "4        1075  Caldera Brewing Company   1293735206             4.0   \n",
       "5        1075  Caldera Brewing Company   1325524659             3.0   \n",
       "6        1075  Caldera Brewing Company   1318991115             3.5   \n",
       "7        1075  Caldera Brewing Company   1306276018             3.0   \n",
       "\n",
       "   review_aroma  review_appearance review_profilename  \\\n",
       "0           2.0                2.5            stcules   \n",
       "1           2.5                3.0            stcules   \n",
       "2           2.5                3.0            stcules   \n",
       "3           3.0                3.5            stcules   \n",
       "4           4.5                4.0     johnmichaelsen   \n",
       "5           3.5                3.5            oline73   \n",
       "6           3.5                3.5          Reidrover   \n",
       "7           2.5                3.5       alpinebryant   \n",
       "\n",
       "                       beer_style  review_palate  review_taste  \\\n",
       "0                      Hefeweizen            1.5           1.5   \n",
       "1              English Strong Ale            3.0           3.0   \n",
       "2          Foreign / Export Stout            3.0           3.0   \n",
       "3                 German Pilsener            2.5           3.0   \n",
       "4  American Double / Imperial IPA            4.0           4.5   \n",
       "5            Herbed / Spiced Beer            3.0           3.5   \n",
       "6            Herbed / Spiced Beer            4.0           4.0   \n",
       "7            Herbed / Spiced Beer            2.0           3.5   \n",
       "\n",
       "                beer_name  beer_abv  beer_beerid  \n",
       "0            Sausa Weizen       5.0        47986  \n",
       "1                Red Moon       6.2        48213  \n",
       "2  Black Horse Black Beer       6.5        48215  \n",
       "3              Sausa Pils       5.0        47969  \n",
       "4           Cauldron DIPA       7.7        64883  \n",
       "5     Caldera Ginger Beer       4.7        52159  \n",
       "6     Caldera Ginger Beer       4.7        52159  \n",
       "7     Caldera Ginger Beer       4.7        52159  "
      ]
     },
     "execution_count": 3,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Loading the Dataset in the dataframe format \n",
    "data=pd.read_csv(\"beer_reviews.csv\")\n",
    "data.head(8)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>brewery_id</th>\n",
       "      <th>review_time</th>\n",
       "      <th>review_overall</th>\n",
       "      <th>review_aroma</th>\n",
       "      <th>review_appearance</th>\n",
       "      <th>review_palate</th>\n",
       "      <th>review_taste</th>\n",
       "      <th>beer_abv</th>\n",
       "      <th>beer_beerid</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>count</th>\n",
       "      <td>1.586614e+06</td>\n",
       "      <td>1.586614e+06</td>\n",
       "      <td>1.586614e+06</td>\n",
       "      <td>1.586614e+06</td>\n",
       "      <td>1.586614e+06</td>\n",
       "      <td>1.586614e+06</td>\n",
       "      <td>1.586614e+06</td>\n",
       "      <td>1.518829e+06</td>\n",
       "      <td>1.586614e+06</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>mean</th>\n",
       "      <td>3.130099e+03</td>\n",
       "      <td>1.224089e+09</td>\n",
       "      <td>3.815581e+00</td>\n",
       "      <td>3.735636e+00</td>\n",
       "      <td>3.841642e+00</td>\n",
       "      <td>3.743701e+00</td>\n",
       "      <td>3.792860e+00</td>\n",
       "      <td>7.042387e+00</td>\n",
       "      <td>2.171279e+04</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>std</th>\n",
       "      <td>5.578104e+03</td>\n",
       "      <td>7.654427e+07</td>\n",
       "      <td>7.206219e-01</td>\n",
       "      <td>6.976167e-01</td>\n",
       "      <td>6.160928e-01</td>\n",
       "      <td>6.822184e-01</td>\n",
       "      <td>7.319696e-01</td>\n",
       "      <td>2.322526e+00</td>\n",
       "      <td>2.181834e+04</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>min</th>\n",
       "      <td>1.000000e+00</td>\n",
       "      <td>8.406720e+08</td>\n",
       "      <td>0.000000e+00</td>\n",
       "      <td>1.000000e+00</td>\n",
       "      <td>0.000000e+00</td>\n",
       "      <td>1.000000e+00</td>\n",
       "      <td>1.000000e+00</td>\n",
       "      <td>1.000000e-02</td>\n",
       "      <td>3.000000e+00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>25%</th>\n",
       "      <td>1.430000e+02</td>\n",
       "      <td>1.173224e+09</td>\n",
       "      <td>3.500000e+00</td>\n",
       "      <td>3.500000e+00</td>\n",
       "      <td>3.500000e+00</td>\n",
       "      <td>3.500000e+00</td>\n",
       "      <td>3.500000e+00</td>\n",
       "      <td>5.200000e+00</td>\n",
       "      <td>1.717000e+03</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>50%</th>\n",
       "      <td>4.290000e+02</td>\n",
       "      <td>1.239203e+09</td>\n",
       "      <td>4.000000e+00</td>\n",
       "      <td>4.000000e+00</td>\n",
       "      <td>4.000000e+00</td>\n",
       "      <td>4.000000e+00</td>\n",
       "      <td>4.000000e+00</td>\n",
       "      <td>6.500000e+00</td>\n",
       "      <td>1.390600e+04</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>75%</th>\n",
       "      <td>2.372000e+03</td>\n",
       "      <td>1.288568e+09</td>\n",
       "      <td>4.500000e+00</td>\n",
       "      <td>4.000000e+00</td>\n",
       "      <td>4.000000e+00</td>\n",
       "      <td>4.000000e+00</td>\n",
       "      <td>4.500000e+00</td>\n",
       "      <td>8.500000e+00</td>\n",
       "      <td>3.944100e+04</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>max</th>\n",
       "      <td>2.800300e+04</td>\n",
       "      <td>1.326285e+09</td>\n",
       "      <td>5.000000e+00</td>\n",
       "      <td>5.000000e+00</td>\n",
       "      <td>5.000000e+00</td>\n",
       "      <td>5.000000e+00</td>\n",
       "      <td>5.000000e+00</td>\n",
       "      <td>5.770000e+01</td>\n",
       "      <td>7.731700e+04</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "         brewery_id   review_time  review_overall  review_aroma  \\\n",
       "count  1.586614e+06  1.586614e+06    1.586614e+06  1.586614e+06   \n",
       "mean   3.130099e+03  1.224089e+09    3.815581e+00  3.735636e+00   \n",
       "std    5.578104e+03  7.654427e+07    7.206219e-01  6.976167e-01   \n",
       "min    1.000000e+00  8.406720e+08    0.000000e+00  1.000000e+00   \n",
       "25%    1.430000e+02  1.173224e+09    3.500000e+00  3.500000e+00   \n",
       "50%    4.290000e+02  1.239203e+09    4.000000e+00  4.000000e+00   \n",
       "75%    2.372000e+03  1.288568e+09    4.500000e+00  4.000000e+00   \n",
       "max    2.800300e+04  1.326285e+09    5.000000e+00  5.000000e+00   \n",
       "\n",
       "       review_appearance  review_palate  review_taste      beer_abv  \\\n",
       "count       1.586614e+06   1.586614e+06  1.586614e+06  1.518829e+06   \n",
       "mean        3.841642e+00   3.743701e+00  3.792860e+00  7.042387e+00   \n",
       "std         6.160928e-01   6.822184e-01  7.319696e-01  2.322526e+00   \n",
       "min         0.000000e+00   1.000000e+00  1.000000e+00  1.000000e-02   \n",
       "25%         3.500000e+00   3.500000e+00  3.500000e+00  5.200000e+00   \n",
       "50%         4.000000e+00   4.000000e+00  4.000000e+00  6.500000e+00   \n",
       "75%         4.000000e+00   4.000000e+00  4.500000e+00  8.500000e+00   \n",
       "max         5.000000e+00   5.000000e+00  5.000000e+00  5.770000e+01   \n",
       "\n",
       "        beer_beerid  \n",
       "count  1.586614e+06  \n",
       "mean   2.171279e+04  \n",
       "std    2.181834e+04  \n",
       "min    3.000000e+00  \n",
       "25%    1.717000e+03  \n",
       "50%    1.390600e+04  \n",
       "75%    3.944100e+04  \n",
       "max    7.731700e+04  "
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Data Description\n",
    "data.describe()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 1586614 entries, 0 to 1586613\n",
      "Data columns (total 13 columns):\n",
      "brewery_id            1586614 non-null int64\n",
      "brewery_name          1586599 non-null object\n",
      "review_time           1586614 non-null int64\n",
      "review_overall        1586614 non-null float64\n",
      "review_aroma          1586614 non-null float64\n",
      "review_appearance     1586614 non-null float64\n",
      "review_profilename    1586266 non-null object\n",
      "beer_style            1586614 non-null object\n",
      "review_palate         1586614 non-null float64\n",
      "review_taste          1586614 non-null float64\n",
      "beer_name             1586614 non-null object\n",
      "beer_abv              1518829 non-null float64\n",
      "beer_beerid           1586614 non-null int64\n",
      "dtypes: float64(6), int64(3), object(4)\n",
      "memory usage: 157.4+ MB\n"
     ]
    }
   ],
   "source": [
    "# Data Information\n",
    "data.info()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/Users/nikhilshetty/anaconda3/lib/python3.6/site-packages/scipy/stats/stats.py:1713: FutureWarning: Using a non-tuple sequence for multidimensional indexing is deprecated; use `arr[tuple(seq)]` instead of `arr[seq]`. In the future this will be interpreted as an array index, `arr[np.array(seq)]`, which will result either in an error or a different result.\n",
      "  return np.add.reduce(sorted[indexer] * weights, axis=axis) / sumval\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "<matplotlib.axes._subplots.AxesSubplot at 0x10843a2e8>"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# This graph shows a linear variation of the  review_appearance with review_aroma\n",
    "sns.barplot(data[\"review_appearance\"], data[\"review_aroma\"])"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## TASK 1 - Which brewery produces the strongest beers by ABV%?"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>brewery_name</th>\n",
       "      <th>beer_name</th>\n",
       "      <th>beer_abv</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>Vecchio Birraio</td>\n",
       "      <td>Sausa Weizen</td>\n",
       "      <td>5.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>Vecchio Birraio</td>\n",
       "      <td>Red Moon</td>\n",
       "      <td>6.2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>Vecchio Birraio</td>\n",
       "      <td>Black Horse Black Beer</td>\n",
       "      <td>6.5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>Vecchio Birraio</td>\n",
       "      <td>Sausa Pils</td>\n",
       "      <td>5.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>Caldera Brewing Company</td>\n",
       "      <td>Cauldron DIPA</td>\n",
       "      <td>7.7</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "              brewery_name               beer_name  beer_abv\n",
       "0          Vecchio Birraio            Sausa Weizen       5.0\n",
       "1          Vecchio Birraio                Red Moon       6.2\n",
       "2          Vecchio Birraio  Black Horse Black Beer       6.5\n",
       "3          Vecchio Birraio              Sausa Pils       5.0\n",
       "4  Caldera Brewing Company           Cauldron DIPA       7.7"
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Transfered the required features into a new data\n",
    "data_brewery=data[[\"brewery_name\",\"beer_name\",\"beer_abv\"]]\n",
    "data_brewery.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/Users/nikhilshetty/anaconda3/lib/python3.6/site-packages/ipykernel_launcher.py:2: FutureWarning: Interpreting tuple 'by' as a list of keys, rather than a single key. Use 'by=[...]' instead of 'by=(...)'. In the future, a tuple will always mean a single key.\n",
      "  \n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead tr th {\n",
       "        text-align: left;\n",
       "    }\n",
       "\n",
       "    .dataframe thead tr:last-of-type th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th colspan=\"2\" halign=\"left\">beer_abv</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th>size</th>\n",
       "      <th>mean</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>brewery_name</th>\n",
       "      <th>beer_name</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th rowspan=\"7\" valign=\"top\">'t Hofbrouwerijke</th>\n",
       "      <th>Blondelle</th>\n",
       "      <td>1.0</td>\n",
       "      <td>8.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Bosprotter</th>\n",
       "      <td>9.0</td>\n",
       "      <td>8.5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Hof Korvatunturi</th>\n",
       "      <td>2.0</td>\n",
       "      <td>11.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Hofblues</th>\n",
       "      <td>16.0</td>\n",
       "      <td>5.5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Hofdraak</th>\n",
       "      <td>7.0</td>\n",
       "      <td>6.5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Hofnar</th>\n",
       "      <td>1.0</td>\n",
       "      <td>5.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Hoftrol</th>\n",
       "      <td>1.0</td>\n",
       "      <td>6.2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th rowspan=\"8\" valign=\"top\">(512) Brewing Company</th>\n",
       "      <th>(512) Alt</th>\n",
       "      <td>11.0</td>\n",
       "      <td>6.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>(512) Black IPA</th>\n",
       "      <td>13.0</td>\n",
       "      <td>7.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>(512) Brandy Barrel Aged ONE</th>\n",
       "      <td>8.0</td>\n",
       "      <td>8.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>(512) Bruin</th>\n",
       "      <td>16.0</td>\n",
       "      <td>7.6</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>(512) Cascabel Cream Stout</th>\n",
       "      <td>7.0</td>\n",
       "      <td>6.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>(512) IPA</th>\n",
       "      <td>54.0</td>\n",
       "      <td>7.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>(512) ONE</th>\n",
       "      <td>13.0</td>\n",
       "      <td>8.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>(512) Pale</th>\n",
       "      <td>14.0</td>\n",
       "      <td>5.5</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                                                   beer_abv      \n",
       "                                                       size  mean\n",
       "brewery_name          beer_name                                  \n",
       "'t Hofbrouwerijke     Blondelle                         1.0   8.0\n",
       "                      Bosprotter                        9.0   8.5\n",
       "                      Hof Korvatunturi                  2.0  11.0\n",
       "                      Hofblues                         16.0   5.5\n",
       "                      Hofdraak                          7.0   6.5\n",
       "                      Hofnar                            1.0   5.0\n",
       "                      Hoftrol                           1.0   6.2\n",
       "(512) Brewing Company (512) Alt                        11.0   6.0\n",
       "                      (512) Black IPA                  13.0   7.0\n",
       "                      (512) Brandy Barrel Aged ONE      8.0   8.0\n",
       "                      (512) Bruin                      16.0   7.6\n",
       "                      (512) Cascabel Cream Stout        7.0   6.0\n",
       "                      (512) IPA                        54.0   7.0\n",
       "                      (512) ONE                        13.0   8.0\n",
       "                      (512) Pale                       14.0   5.5"
      ]
     },
     "execution_count": 8,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Performed groupby and aggregation function the required features\n",
    "data_brewery_abv=data_brewery.groupby((\"brewery_name\",\"beer_name\")).agg({\"beer_abv\":[np.size,np.mean]})\n",
    "data_brewery_abv.head(15)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>brewery_name</th>\n",
       "      <th>Size</th>\n",
       "      <th>ABV_mean</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>Schorschbräu</td>\n",
       "      <td>3.400000</td>\n",
       "      <td>24.690000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>Shoes Brewery</td>\n",
       "      <td>2.000000</td>\n",
       "      <td>15.200000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>Rome Brewing Company</td>\n",
       "      <td>1.500000</td>\n",
       "      <td>14.200000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>Hurlimann Brewery</td>\n",
       "      <td>4.750000</td>\n",
       "      <td>13.500000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>Alt-Oberurseler Brauhaus</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>13.200000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>Rascal Creek Brewing Co.</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>13.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>Monks Porter House</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>12.466667</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>United Brands Company</td>\n",
       "      <td>26.000000</td>\n",
       "      <td>12.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>Morgan Street Brewery</td>\n",
       "      <td>4.478261</td>\n",
       "      <td>12.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>Rinkuki&amp;#371; Aluas Darykla</td>\n",
       "      <td>5.500000</td>\n",
       "      <td>12.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10</th>\n",
       "      <td>Snowy Mountain Brewery</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>12.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>11</th>\n",
       "      <td>Nasu Kogen Beer Co. Ltd.</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>11.500000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>12</th>\n",
       "      <td>Etna Brewery</td>\n",
       "      <td>3.222222</td>\n",
       "      <td>11.500000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>13</th>\n",
       "      <td>Steam Plant Grill</td>\n",
       "      <td>1.692308</td>\n",
       "      <td>11.066667</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>14</th>\n",
       "      <td>Water Street Brewing &amp; Ale House</td>\n",
       "      <td>2.400000</td>\n",
       "      <td>11.000000</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                        brewery_name       Size   ABV_mean\n",
       "0                       Schorschbräu   3.400000  24.690000\n",
       "1                      Shoes Brewery   2.000000  15.200000\n",
       "2               Rome Brewing Company   1.500000  14.200000\n",
       "3                  Hurlimann Brewery   4.750000  13.500000\n",
       "4           Alt-Oberurseler Brauhaus   1.000000  13.200000\n",
       "5           Rascal Creek Brewing Co.   1.000000  13.000000\n",
       "6                 Monks Porter House   1.000000  12.466667\n",
       "7              United Brands Company  26.000000  12.000000\n",
       "8              Morgan Street Brewery   4.478261  12.000000\n",
       "9       Rinkuki&#371; Aluas Darykla   5.500000  12.000000\n",
       "10            Snowy Mountain Brewery   1.000000  12.000000\n",
       "11          Nasu Kogen Beer Co. Ltd.   1.000000  11.500000\n",
       "12                      Etna Brewery   3.222222  11.500000\n",
       "13                 Steam Plant Grill   1.692308  11.066667\n",
       "14  Water Street Brewing & Ale House   2.400000  11.000000"
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Grouped all the breweries and took the mean of the abv% of each of them\n",
    "data_brewery_abv_mean=data_brewery_abv.groupby(\"brewery_name\").mean()\n",
    "#data_brewery_abv_mean.head(15)\n",
    "data_brewery_abv_mean.columns=(\"Size\",\"ABV_mean\")\n",
    "data_brewery_abv_mean_sorted=data_brewery_abv_mean.sort_values(\"ABV_mean\",ascending=False).reset_index()\n",
    "data_brewery_abv_mean_sorted.head(15)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [],
   "source": [
    "# ANSWER : Hence the brewery_name \"Schorschbräu\" produces the trongest beers in ABV%"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## TASK 2 - If you had to pick 3 beers to recommend using only this data,which would you  pick?"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>beer_name</th>\n",
       "      <th>beer_abv</th>\n",
       "      <th>review_overall</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>Sausa Weizen</td>\n",
       "      <td>5.0</td>\n",
       "      <td>1.5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>Red Moon</td>\n",
       "      <td>6.2</td>\n",
       "      <td>3.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>Black Horse Black Beer</td>\n",
       "      <td>6.5</td>\n",
       "      <td>3.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>Sausa Pils</td>\n",
       "      <td>5.0</td>\n",
       "      <td>3.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>Cauldron DIPA</td>\n",
       "      <td>7.7</td>\n",
       "      <td>4.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                beer_name  beer_abv  review_overall\n",
       "0            Sausa Weizen       5.0             1.5\n",
       "1                Red Moon       6.2             3.0\n",
       "2  Black Horse Black Beer       6.5             3.0\n",
       "3              Sausa Pils       5.0             3.0\n",
       "4           Cauldron DIPA       7.7             4.0"
      ]
     },
     "execution_count": 11,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Transfered the required features into a new data\n",
    "top_beers = data[[\"beer_name\",\"beer_abv\",\"review_overall\"]]\n",
    "top_beers.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/Users/nikhilshetty/anaconda3/lib/python3.6/site-packages/ipykernel_launcher.py:2: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: http://pandas.pydata.org/pandas-docs/stable/indexing.html#indexing-view-versus-copy\n",
      "  \n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>beer_name</th>\n",
       "      <th>beer_abv</th>\n",
       "      <th>review_overall</th>\n",
       "      <th>Review_Overall_Count</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>Sausa Weizen</td>\n",
       "      <td>5.0</td>\n",
       "      <td>1.5</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>Red Moon</td>\n",
       "      <td>6.2</td>\n",
       "      <td>3.0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>Black Horse Black Beer</td>\n",
       "      <td>6.5</td>\n",
       "      <td>3.0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>Sausa Pils</td>\n",
       "      <td>5.0</td>\n",
       "      <td>3.0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>Cauldron DIPA</td>\n",
       "      <td>7.7</td>\n",
       "      <td>4.0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>Caldera Ginger Beer</td>\n",
       "      <td>4.7</td>\n",
       "      <td>3.0</td>\n",
       "      <td>9</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>Caldera Ginger Beer</td>\n",
       "      <td>4.7</td>\n",
       "      <td>3.5</td>\n",
       "      <td>9</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>Caldera Ginger Beer</td>\n",
       "      <td>4.7</td>\n",
       "      <td>3.0</td>\n",
       "      <td>9</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>Caldera Ginger Beer</td>\n",
       "      <td>4.7</td>\n",
       "      <td>4.0</td>\n",
       "      <td>9</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>Caldera Ginger Beer</td>\n",
       "      <td>4.7</td>\n",
       "      <td>4.5</td>\n",
       "      <td>9</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10</th>\n",
       "      <td>Amstel Light</td>\n",
       "      <td>3.5</td>\n",
       "      <td>3.0</td>\n",
       "      <td>465</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>11</th>\n",
       "      <td>Caldera Ginger Beer</td>\n",
       "      <td>4.7</td>\n",
       "      <td>5.0</td>\n",
       "      <td>9</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>12</th>\n",
       "      <td>Caldera Ginger Beer</td>\n",
       "      <td>4.7</td>\n",
       "      <td>4.0</td>\n",
       "      <td>9</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>13</th>\n",
       "      <td>Caldera Ginger Beer</td>\n",
       "      <td>4.7</td>\n",
       "      <td>4.0</td>\n",
       "      <td>9</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>14</th>\n",
       "      <td>Caldera Ginger Beer</td>\n",
       "      <td>4.7</td>\n",
       "      <td>3.5</td>\n",
       "      <td>9</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                 beer_name  beer_abv  review_overall  Review_Overall_Count\n",
       "0             Sausa Weizen       5.0             1.5                     1\n",
       "1                 Red Moon       6.2             3.0                     1\n",
       "2   Black Horse Black Beer       6.5             3.0                     1\n",
       "3               Sausa Pils       5.0             3.0                     1\n",
       "4            Cauldron DIPA       7.7             4.0                     1\n",
       "5      Caldera Ginger Beer       4.7             3.0                     9\n",
       "6      Caldera Ginger Beer       4.7             3.5                     9\n",
       "7      Caldera Ginger Beer       4.7             3.0                     9\n",
       "8      Caldera Ginger Beer       4.7             4.0                     9\n",
       "9      Caldera Ginger Beer       4.7             4.5                     9\n",
       "10            Amstel Light       3.5             3.0                   465\n",
       "11     Caldera Ginger Beer       4.7             5.0                     9\n",
       "12     Caldera Ginger Beer       4.7             4.0                     9\n",
       "13     Caldera Ginger Beer       4.7             4.0                     9\n",
       "14     Caldera Ginger Beer       4.7             3.5                     9"
      ]
     },
     "execution_count": 12,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Found the count of each beer\n",
    "top_beers[\"Review_Overall_Count\"]=top_beers.groupby([\"beer_name\"])[\"review_overall\"].transform(\"count\")\n",
    "top_beers.head(15)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Used Matplotlib library to get an idea on how many reviews/count was received based on overall reviews for each beer\n",
    "plt.hist(top_beers[\"Review_Overall_Count\"], bins=30)\n",
    "plt.xlabel(\"Review_Overall_Count\")\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/Users/nikhilshetty/anaconda3/lib/python3.6/site-packages/ipykernel_launcher.py:2: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: http://pandas.pydata.org/pandas-docs/stable/indexing.html#indexing-view-versus-copy\n",
      "  \n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>beer_name</th>\n",
       "      <th>beer_abv</th>\n",
       "      <th>review_overall</th>\n",
       "      <th>Review_Overall_Count</th>\n",
       "      <th>Review_Overall_Mean</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>Sausa Weizen</td>\n",
       "      <td>5.0</td>\n",
       "      <td>1.5</td>\n",
       "      <td>1</td>\n",
       "      <td>1.500000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>Red Moon</td>\n",
       "      <td>6.2</td>\n",
       "      <td>3.0</td>\n",
       "      <td>1</td>\n",
       "      <td>3.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>Black Horse Black Beer</td>\n",
       "      <td>6.5</td>\n",
       "      <td>3.0</td>\n",
       "      <td>1</td>\n",
       "      <td>3.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>Sausa Pils</td>\n",
       "      <td>5.0</td>\n",
       "      <td>3.0</td>\n",
       "      <td>1</td>\n",
       "      <td>3.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>Cauldron DIPA</td>\n",
       "      <td>7.7</td>\n",
       "      <td>4.0</td>\n",
       "      <td>1</td>\n",
       "      <td>4.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>Caldera Ginger Beer</td>\n",
       "      <td>4.7</td>\n",
       "      <td>3.0</td>\n",
       "      <td>9</td>\n",
       "      <td>3.833333</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>Caldera Ginger Beer</td>\n",
       "      <td>4.7</td>\n",
       "      <td>3.5</td>\n",
       "      <td>9</td>\n",
       "      <td>3.833333</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>Caldera Ginger Beer</td>\n",
       "      <td>4.7</td>\n",
       "      <td>3.0</td>\n",
       "      <td>9</td>\n",
       "      <td>3.833333</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>Caldera Ginger Beer</td>\n",
       "      <td>4.7</td>\n",
       "      <td>4.0</td>\n",
       "      <td>9</td>\n",
       "      <td>3.833333</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>Caldera Ginger Beer</td>\n",
       "      <td>4.7</td>\n",
       "      <td>4.5</td>\n",
       "      <td>9</td>\n",
       "      <td>3.833333</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                beer_name  beer_abv  review_overall  Review_Overall_Count  \\\n",
       "0            Sausa Weizen       5.0             1.5                     1   \n",
       "1                Red Moon       6.2             3.0                     1   \n",
       "2  Black Horse Black Beer       6.5             3.0                     1   \n",
       "3              Sausa Pils       5.0             3.0                     1   \n",
       "4           Cauldron DIPA       7.7             4.0                     1   \n",
       "5     Caldera Ginger Beer       4.7             3.0                     9   \n",
       "6     Caldera Ginger Beer       4.7             3.5                     9   \n",
       "7     Caldera Ginger Beer       4.7             3.0                     9   \n",
       "8     Caldera Ginger Beer       4.7             4.0                     9   \n",
       "9     Caldera Ginger Beer       4.7             4.5                     9   \n",
       "\n",
       "   Review_Overall_Mean  \n",
       "0             1.500000  \n",
       "1             3.000000  \n",
       "2             3.000000  \n",
       "3             3.000000  \n",
       "4             4.000000  \n",
       "5             3.833333  \n",
       "6             3.833333  \n",
       "7             3.833333  \n",
       "8             3.833333  \n",
       "9             3.833333  "
      ]
     },
     "execution_count": 14,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Took the mean of the overall review of the beers\n",
    "top_beers[\"Review_Overall_Mean\"]=top_beers.groupby([\"beer_name\"])[\"review_overall\"].transform(\"mean\")\n",
    "top_beers.head(10)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>beer_name</th>\n",
       "      <th>beer_abv</th>\n",
       "      <th>review_overall</th>\n",
       "      <th>Review_Overall_Count</th>\n",
       "      <th>Review_Overall_Mean</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>665396</th>\n",
       "      <td>Armand'4 Oude Geuze Lente (Spring)</td>\n",
       "      <td>6.00</td>\n",
       "      <td>5.0</td>\n",
       "      <td>65</td>\n",
       "      <td>4.730769</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>659495</th>\n",
       "      <td>Hoppy Birthday</td>\n",
       "      <td>5.25</td>\n",
       "      <td>4.5</td>\n",
       "      <td>65</td>\n",
       "      <td>4.684615</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>664849</th>\n",
       "      <td>Geuze Cuvée J&amp;J (Joost En Jessie) Blauw (Blue)</td>\n",
       "      <td>6.50</td>\n",
       "      <td>5.0</td>\n",
       "      <td>71</td>\n",
       "      <td>4.633803</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                                             beer_name  beer_abv  \\\n",
       "665396              Armand'4 Oude Geuze Lente (Spring)      6.00   \n",
       "659495                                  Hoppy Birthday      5.25   \n",
       "664849  Geuze Cuvée J&J (Joost En Jessie) Blauw (Blue)      6.50   \n",
       "\n",
       "        review_overall  Review_Overall_Count  Review_Overall_Mean  \n",
       "665396             5.0                    65             4.730769  \n",
       "659495             4.5                    65             4.684615  \n",
       "664849             5.0                    71             4.633803  "
      ]
     },
     "execution_count": 15,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Decided to take a minimum of 50 overall reviews for a beer \n",
    "top_beers_count=top_beers[top_beers[\"Review_Overall_Count\"] >= 50]\n",
    "top_beers_count_group=top_beers_count.groupby(\"beer_name\").head(1).sort_values(\"Review_Overall_Mean\",ascending=False)\n",
    "top_beers_count_group.head(3)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#ANSWER : Hence my top 3 beers would be \"Armand'4 Oude Geuze Lente (Spring)\",\"Hoppy Birthday\",\"\tGeuze Cuvée J&J (Joost En Jessie) Blauw (Blue)\" and based my result on 2 factors mainly:\n",
    "#First being the minimum number of reviews I considered which is 50 for each beer review\n",
    "#Secondly the mean of the \"review_overall\" beers\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## TASK 3 - Which of the factors (aroma, taste, appearance, palette) are most important in determining the overall quality of a beer?"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>review_aroma</th>\n",
       "      <th>review_taste</th>\n",
       "      <th>review_appearance</th>\n",
       "      <th>review_palate</th>\n",
       "      <th>review_overall</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>beer_name</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>! (Old Ale)</th>\n",
       "      <td>4.500000</td>\n",
       "      <td>4.500000</td>\n",
       "      <td>4.000000</td>\n",
       "      <td>4.000000</td>\n",
       "      <td>4.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>\"100\"</th>\n",
       "      <td>4.000000</td>\n",
       "      <td>4.400000</td>\n",
       "      <td>4.000000</td>\n",
       "      <td>4.000000</td>\n",
       "      <td>4.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>\"100\" Pale Ale</th>\n",
       "      <td>4.000000</td>\n",
       "      <td>4.000000</td>\n",
       "      <td>3.500000</td>\n",
       "      <td>4.000000</td>\n",
       "      <td>4.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>\"12\"  Belgian Golden Strong Ale</th>\n",
       "      <td>3.500000</td>\n",
       "      <td>4.500000</td>\n",
       "      <td>4.250000</td>\n",
       "      <td>4.750000</td>\n",
       "      <td>4.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>\"33\" Export</th>\n",
       "      <td>3.000000</td>\n",
       "      <td>3.000000</td>\n",
       "      <td>3.000000</td>\n",
       "      <td>3.166667</td>\n",
       "      <td>3.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>\"4\" Horse Oatmeal Stout</th>\n",
       "      <td>3.500000</td>\n",
       "      <td>3.250000</td>\n",
       "      <td>4.000000</td>\n",
       "      <td>3.250000</td>\n",
       "      <td>4.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>\"400\" Ale</th>\n",
       "      <td>3.833333</td>\n",
       "      <td>3.444444</td>\n",
       "      <td>3.916667</td>\n",
       "      <td>3.750000</td>\n",
       "      <td>3.333333</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>\"50\" Golden Anniversary Lager</th>\n",
       "      <td>3.500000</td>\n",
       "      <td>3.500000</td>\n",
       "      <td>5.000000</td>\n",
       "      <td>3.500000</td>\n",
       "      <td>4.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>\"76\" Anniversary Ale</th>\n",
       "      <td>4.166667</td>\n",
       "      <td>4.166667</td>\n",
       "      <td>3.666667</td>\n",
       "      <td>4.000000</td>\n",
       "      <td>4.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>\"76\" Anniversary Ale With English Hops</th>\n",
       "      <td>4.000000</td>\n",
       "      <td>4.500000</td>\n",
       "      <td>3.500000</td>\n",
       "      <td>4.000000</td>\n",
       "      <td>4.000000</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                                        review_aroma  review_taste  \\\n",
       "beer_name                                                            \n",
       "! (Old Ale)                                 4.500000      4.500000   \n",
       "\"100\"                                       4.000000      4.400000   \n",
       "\"100\" Pale Ale                              4.000000      4.000000   \n",
       "\"12\"  Belgian Golden Strong Ale             3.500000      4.500000   \n",
       "\"33\" Export                                 3.000000      3.000000   \n",
       "\"4\" Horse Oatmeal Stout                     3.500000      3.250000   \n",
       "\"400\" Ale                                   3.833333      3.444444   \n",
       "\"50\" Golden Anniversary Lager               3.500000      3.500000   \n",
       "\"76\" Anniversary Ale                        4.166667      4.166667   \n",
       "\"76\" Anniversary Ale With English Hops      4.000000      4.500000   \n",
       "\n",
       "                                        review_appearance  review_palate  \\\n",
       "beer_name                                                                  \n",
       "! (Old Ale)                                      4.000000       4.000000   \n",
       "\"100\"                                            4.000000       4.000000   \n",
       "\"100\" Pale Ale                                   3.500000       4.000000   \n",
       "\"12\"  Belgian Golden Strong Ale                  4.250000       4.750000   \n",
       "\"33\" Export                                      3.000000       3.166667   \n",
       "\"4\" Horse Oatmeal Stout                          4.000000       3.250000   \n",
       "\"400\" Ale                                        3.916667       3.750000   \n",
       "\"50\" Golden Anniversary Lager                    5.000000       3.500000   \n",
       "\"76\" Anniversary Ale                             3.666667       4.000000   \n",
       "\"76\" Anniversary Ale With English Hops           3.500000       4.000000   \n",
       "\n",
       "                                        review_overall  \n",
       "beer_name                                               \n",
       "! (Old Ale)                                   4.000000  \n",
       "\"100\"                                         4.000000  \n",
       "\"100\" Pale Ale                                4.000000  \n",
       "\"12\"  Belgian Golden Strong Ale               4.000000  \n",
       "\"33\" Export                                   3.000000  \n",
       "\"4\" Horse Oatmeal Stout                       4.000000  \n",
       "\"400\" Ale                                     3.333333  \n",
       "\"50\" Golden Anniversary Lager                 4.000000  \n",
       "\"76\" Anniversary Ale                          4.000000  \n",
       "\"76\" Anniversary Ale With English Hops        4.000000  "
      ]
     },
     "execution_count": 16,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Grouped the required features - aroma, taste, appearance, palette and performed aggregated function on them\n",
    "quality_beer_grouped= data.groupby(\"beer_name\").agg({\"review_aroma\":\"mean\",\"review_taste\":\"mean\",\"review_appearance\":\"mean\",\"review_palate\":\"mean\",\"review_overall\":\"mean\"})\n",
    "quality_beer_grouped.head(10)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>review_aroma</th>\n",
       "      <th>review_taste</th>\n",
       "      <th>review_appearance</th>\n",
       "      <th>review_palate</th>\n",
       "      <th>review_overall</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>review_aroma</th>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.815275</td>\n",
       "      <td>0.660861</td>\n",
       "      <td>0.735537</td>\n",
       "      <td>0.751067</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>review_taste</th>\n",
       "      <td>0.815275</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.658218</td>\n",
       "      <td>0.825030</td>\n",
       "      <td>0.875082</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>review_appearance</th>\n",
       "      <td>0.660861</td>\n",
       "      <td>0.658218</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.677276</td>\n",
       "      <td>0.634584</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>review_palate</th>\n",
       "      <td>0.735537</td>\n",
       "      <td>0.825030</td>\n",
       "      <td>0.677276</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.811133</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>review_overall</th>\n",
       "      <td>0.751067</td>\n",
       "      <td>0.875082</td>\n",
       "      <td>0.634584</td>\n",
       "      <td>0.811133</td>\n",
       "      <td>1.000000</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                   review_aroma  review_taste  review_appearance  \\\n",
       "review_aroma           1.000000      0.815275           0.660861   \n",
       "review_taste           0.815275      1.000000           0.658218   \n",
       "review_appearance      0.660861      0.658218           1.000000   \n",
       "review_palate          0.735537      0.825030           0.677276   \n",
       "review_overall         0.751067      0.875082           0.634584   \n",
       "\n",
       "                   review_palate  review_overall  \n",
       "review_aroma            0.735537        0.751067  \n",
       "review_taste            0.825030        0.875082  \n",
       "review_appearance       0.677276        0.634584  \n",
       "review_palate           1.000000        0.811133  \n",
       "review_overall          0.811133        1.000000  "
      ]
     },
     "execution_count": 17,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#Performed correlation analysis between all the features\n",
    "correlation=quality_beer_grouped.corr()\n",
    "correlation"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.axes._subplots.AxesSubplot at 0x10847ce80>"
      ]
     },
     "execution_count": 18,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "iVBORw0KGgoAAAANSUhEUgAAAjMAAAJDCAYAAAD+cJUDAAAABHNCSVQICAgIfAhkiAAAAAlwSFlzAAALEgAACxIB0t1+/AAAADl0RVh0U29mdHdhcmUAbWF0cGxvdGxpYiB2ZXJzaW9uIDIuMi4yLCBodHRwOi8vbWF0cGxvdGxpYi5vcmcvhp/UCwAAIABJREFUeJzs3XmYXFWZ+PHv252EsGVfSCBACCEmCAKDgAgiqwi4AYqgI6gQV0R0/KmjIkRgZB92JiiLiKACggKiDAMJIIsBBGQJazYge0hCtu50nd8fVYROSNL3xq7qvqnv53nq6b73nlv13iKQw3vec06klJAkSSqqho4OQJIk6V9hZ0aSJBWanRlJklRodmYkSVKh2ZmRJEmFZmdGkiQVmp0ZSZJUaHZmJElSodmZkSRJhdalRp/jMsOSpHoTtfqgO7qOqOnfs4c2T6zZs2VRq84Md3QdUauPqjuHNk/s6BAkSeowDjNJkqRCq1lmRpIkVUd07VSjPjVnZkaSJBWamRlJkgquoYuZGUmSpMIyMyNJUsFF1/rOTdT300uSpMIzMyNJUsFZMyNJklRgZmYkSSo415mRJEkqMDszkiSp0BxmkiSp4CwAliRJKjAzM5IkFZwFwJIkSQVmZkaSpIKzZkaSJKnAzMxIklRw0WhmRpIkqbDMzEiSVHANZmYkSZKKy8yMJEkFFw1mZiRJkgrLzIwkSQUXjfWdm6jvp5ckSYVnZkaSpIJzNpMkSVKB2ZmRJEmF5jCTJEkF59RsSZKkAjMzI0lSwVkALEmSVGBmZiRJKrgwMyNJklRcZmYkSSq4aKjv3ER9P70kSSo8MzOSJBWc68xIkiQVmJkZSZIKznVmJEmSCszMjCRJBWfNjCRJUoGZmZEkqeBcZ0aSJKnA7MxIkqRCc5hJkqSCswBYkiSpwMzMrGLHK89kwCEfpmnmHMbv/LGODkeSpDa5aJ5WMu3aW3j0sOM7OgxJkpSRmZlVzH1gAhtutXlHhyFJUmb1XjOTqzMTEe8FRgHd3z6XUvpVewclSZKUVebOTET8FPgw5c7MncBHgQcAOzOSJHUgF83L7khgf2B6SumLwPuADdbUOCJGR8SEiJgwduzYfzFMSZKk1cvTmVmSUioByyOiBzAT2GZNjVNKY1NKu6aUdh09evS/GqckSVqDaIiavtqMJ+LgiJgYES9FxA9Wc32riLgnIp6KiPsiYotW17aMiL9GxHMR8WxEbN3W5+XpzEyIiF7AlcBjwOPAoznuL4SdrjuPPe+/kY1HDGW/V8cx5ItHdnRIkiQVRkQ0ApdSLkcZBRwdEaNWaXYu8KuU0o7AGOC/Wl37FXBOSmkksBvl5MlaZa6ZSSl9vfLrFRFxF9AjpfRU1vuL4h///t2ODkGSpFw62Wym3YCXUkqvAETEjcAngGdbtRkFnFz5/V7g1krbUUCXlNLdACmlt7J8YK6KoYjYMSI+DuwCbBsRh+e5X5Ikrfc2B6a2Op5WOdfak8ARld8/BWwaEX2B7YA3I+KWiHgiIs6pZHrWKs9spquAHYFngFLldAJuyfoekiSp/dU6MxMRo4HWBbFjU0pvz/ZZXTBpleP/AC6JiOOA8cBrwHLK/ZK9gZ2BKcBvgeOAX64tnjzrzOyRUlp1zEuSJNWZSsdlTVOVpwFDWh1vAby+yv2vA4cDRMQmwBEppfkRMQ14otUQ1a3AHrRjZ+ahiBiVUnq27aaSJKlWOtk6M38HhkfEUMoZl88Cx7RuEBH9gLmVWdI/BK5qdW/viOifUpoF7AdMaOsD8zz9tZQ7NBMrU6mejoj1rgBYkiStu5TScuCbwF+A54DfpZSeiYgxlbpbKC/COzEiXgAGAmdU7m2hPAR1T0Q8TXnI6sq2PjNPZuYq4N+Bp3mnZkaSJHWwzrZrdkrpTsq7BbQ+d0qr328CblrDvXdTrtHNLE9nZkpK6Y953lySJKna8nRmno+I3wB/Apa9fTKl5GwmSZLUYfJ0Zjak3Ik5qNU5p2ZLktTBOtmieTWXZwXgL1YzEEmSpHWRZ9G8LYCLgQ9Szsg8AJyUUppWpdgkSVIGnWxqds3lefqrgT8CgykvS/ynyjlJkqQOk6dmpn9KqXXn5ZqI+HZ7ByRJkvKp95qZPJmZ2RHx+YhorLw+D8ypVmCSJElZ5MnMfAm4BLiAcs3M3yrnJElSB6r3zEymzkxl++0jUkofb7OxJElSDWXqzKSUWiLiE5SzMpIkqROp99lMeYaZHoyIS4DfAovePplSerzdo5IkScooT2dmz8rPMa3OJcrbc0uSpA5izUxGKaV9qxmIJEnSusiTmSEiDgW2B7q/fS6lNGbNd0iSpGqr95qZzE8fEVcARwEnAgF8GtiqSnFJkiRlkqcrt2dK6QvAvJTSacAHgCHVCUuSJGUWUdtXJ5OnM7Ok8nNxRAwGmoGh7R+SJElSdnlqZm6PiF7AOcDjlGcyXVmVqCRJkjLKM5vpZ5Vfb46I24HuKaX5b1+PiANTSne3d4CSJGnt6n1q9jqVP6eUlrXuyFSc1Q7xSJIk5ZJranYb6rtbKElSB3FqdvtJ7fhekiRJmbRnZkaSJHUAa2baz6R2fC9JkqRMMmdmIuJ+YDxwP/BgSmlh6+sppcPbOTZJkpSBNTPZHQtMBI4A/hYREyLiguqEJUmSlE2edWZeiYglQFPltS8wslqBSZKkbKyZySgiXgZuBQYCvwTem1I6uFqBSZIkZZFnNtNFwF7A0cDOwLiIGJ9SerkqkUmSpEzMzGSUUrowpfRp4ADgMeBU4IUqxSVJkpRJntlM51HOzGwCPAScQnlmkyRJ6kh1PpspzzDTw8DZKaUZ1QpGkiQprzxduZuBAyPiJwARsWVE7FadsCRJUlYRUdNXZ5OnM3Mp8AHgmMrxwso5SZKkDpNnmGn3lNIuEfEEQEppXkR0q1JckiRJmeTpzDRHRCOV3bEjoj9QqkpUkiQpM7czyO4i4A/AgIg4A3gAOLMqUUmSJGWUZzuD6yPiMWB/IIBPppSeq1pkkiQpk3pfNK/NzkxE9EgpLYiIPsBM4IZW1/qklOZWM0BJkqS1yZKZ+Q1wGOVVf1Or81E53qYKcUmSpKzqvGamzc5MSumwys+h1Q9HkiQpnzzbGdwG3AjcllJaXL2QJElSHtbMZHc+cBTw84h4FPgtcHtKaWmWmw9tnrgO4UmSJK1dntlM44BxlbVm9gNOAK4CelQpNkmSlEGENTOZRcSGwMcoZ2h2Aa7Neu9LL7+aLzJltu2wcjnTHV1HdHAk6zezi5LUOeWpmfktsDtwF+U9me5LKbkCsCRJHc2amcyuBo5JKbVUKxhJkqS88nRmxgM/jIgtU0qjI2I4MCKldHuVYpMkSRm4N1N2VwNNwJ6V42nA6e0ekSRJUg55MjPDUkpHRcTRACmlJRFR34N0kiR1AvW+zkyezExTZTZTAoiIYcCyqkQlSZKUUabMTCUDcwXlmUxDIuJ64IPAcdULTZIkqW2ZOjMppRQRJwEHAXtQ3mTypJTS7GoGJ0mSMnDRvMweBrZJKd1RrWAkSZLyytOZ2Rf4SkRMBhZRzs6klNKOVYlMkiRlUu8FwHk6Mx+tWhSSJEnrKM9Gk5OrGYgkSVpHLponSZJUXLl2zZYkSZ1Pva9ha2ZGkiQVmpkZSZKKzpoZSZKk4jIzI0lSwdX7OjNmZiRJUqGZmZEkqejqfG+m+n56SZJUeGZmJEkqOmtmJEmSisvOjCRJKjSHmSRJKriwAFiSJKm4zMxIklR0FgBLkiQVl5kZSZIKLtxoUpIkqbjMzEiSVHRhzYwkSVJhmZmRJKnorJmRJEkqLjMzkiQVnTUzkiRJxWVmRpKkgnOdGUmSpAIzMyNJUtG5a7YkSVJx2ZmRJEmF5jCTJElF1+DUbEmSpMIyMyNJUsGFBcCSJEnFZWZGkqSis2ZGkiSpuMzMSJJUdHVeM1N3nZkJEyYw9n8up1QqcdBHDuYznzlqpeszZ87k/PPPZdFbiyiVWjjui1/i/e/fjScef5yrr7mK5c3L6dK1C1/+0vG8b6edOugpim3HK89kwCEfpmnmHMbv/LGODkeSVHB11ZVraWnh8ssu5bQxp3P5FWMZP+4+pkyZvFKbG2+8gb33/hAXX3Ip3//BD7ns0ksA6NGzBz/96WlcdvkVfOc7/8F5553TEY+wXph27S08etjxHR2GJK0/Imr76mTqqjPzwgsTGTx4EIMGDaJr16586EP78PBDD63UJgIWL14MwKJFi+jTty8Aw4ZtS9/K71tttRVNTU00NzfV9gHWE3MfmEDz3PkdHYYkaT2ReZgpIrYDLgcGppTeGxE7Ah9PKZ1eteja2Zw5c+jXr/+K4379+jFx4sSV2nzuc5/nxz/6EX/64x9ZumwpZ5zxX+96nwcffIBthg2ja9duVY9ZkqQ2NdRVbuJd8jz9lcAPgWaAlNJTwGfX1DgiRkfEhIiYMHbs2H8tynaSUnr3yVXSZePuu48DDjyQX133a047bQznnXsOpVJpxfXJkydx9VVXceKJ36p2uJIkKYM8BcAbpZQejZX/8l++psYppbHA272Y9NLLr65DeO2rX79+zJ49a8Xx7Nmz6dunz0pt/vrXvzDmZ2cAMHLkKJqam1iwYAG9evVi9uxZnP6zn/Hd7/4HgwYNrmnskiStUZ3PZsrz9LMjYhiQACLiSOCNqkRVJdttN4LXXn+d6dOn09zczPjx49h9jz1WatO//wD+8Y8nAJgyZQrNTU307NmTt956i1N/egrHHfdFRm2/fUeEL0mSViNPZuYblDMt74mI14BXgc9VJaoqaWxs5Gtf+zo/+fGPKJVKHHjQQWy11dZcd92vGD58OHvs8QGOP+EELrrwQm679Q8Qwcnf+S4Rwe1/+iOvv/46N9z4G2648TcAnH76mfTq1auDn6p4drruPPrusxvd+vVmv1fH8eKYi5l69U0dHZYkFVedrwAcq60jWV3DiKEppVcjYmOgIaW08O1zGW7vFMNM66tthw0F4I6uIzo4kvXboc0T224kSe+oWQ9j6a0XZfvLvJ10/+S3OlXvKc8w080AKaVFKaWFlXP+77QkSepQbQ4zRcR7gO2BnhFxeKtLPYDu1QpMkiRlVOcFwFlqZkYAhwG9gNZrzy8ETqhGUJIkSVm12ZlJKd0G3BYRH0gpPdRWe0mSVGOdcIuBWsqTl/pURPSIiK4RcU9EzI6Iz1ctMkmSpAzydGYOSiktoDzkNA3YDvheVaKSJEnZNTTU9tXJ5Imoa+XnIcANKaW5VYhHkiQplzydmT9FxPPArsA9EdEfWFqdsCRJUmYRtX21GU4cHBETI+KliPjBaq5vGRH3RsQTEfFURBxSOd81Iq6NiKcj4rmI+GGWx8/cmUkp/QD4ALBrSqkZWAR8Iuv9kiRp/RcRjcClwEeBUcDRETFqlWY/Bn6XUtqZ8qbVl1XOfxrYIKW0A/BvwFciYuu2PjPPdgYAmwMHRkTr9WV+lfM9JElSe+pc68zsBryUUnoFICJupJz8eLZVm0R5vTqAnsDrrc5vHBFdgA2BJmBBWx+YuTMTET8FPky5l3Un5R7XA9iZkSRJ79gcmNrqeBqw+yptTgX+GhEnAhsDB1TO30S54/MGsBFwcpYa3TxduSOB/YHpKaUvAu8DNshxvyRJqoYaz2aKiNERMaHVa3SraFZXVLPq3lFHA9eklLagPLHouohooJzVaQEGA0OB70bENm09fp5hpiUppVJELI+IHsBMoM0PkCRJ65eU0lhg7BouTwOGtDregneGkd72ZeDgyns9VClf6QccA9xVqc2dGREPUp549Mra4smTmZkQEb2AK4HHgMeBR3PcL0mSqqFzzWb6OzA8IoZGRDfKBb5/XKXNFMqjPUTESMp7Pc6qnN8vyjYG9gCeb+sDM2dmUkpfr/x6RUTcBfRIKT2V9X5JkrT+Syktj4hvAn8BGoGrUkrPRMQYYEJK6Y/Ad4ErI+JkykNQx6WUUkRcClwN/JPycNXVWfoaeQqA70kp7V8JdNKq5yRJUgfpXLOZSCndSXmyUOtzp7T6/Vngg6u57y3K07NzabMzUxnH2gjoFxG9eaewpwflAh1JkqQOkyUz8xXg25Q7Lo/xTmdmAeVFcSRJkjpMm52ZlNKFwIURcWJK6eI1tYuIA1NKd7drdJIkqW0ZthhYn+XZzmCNHZmKs/7FWCRJknLLu53B2tR3t1CSpI7S0LkKgGutPZ9+1dX9JEmSqq49MzOSJKkDJGtm2s2kdnwvSZKkTPIsmnc/MB64H3gwpbSw9fWU0uHtHJskScqiky2aV2t5nv5YYCJwBPC3yi6ZF1QnLEmSpGzy7M30SkQsAZoqr32BkdUKTJIkZWRmJpuIeBm4FRgI/BJ4b0rp4GoFJkmSlEWe2UwXAXsBRwM7A+MiYnxK6eWqRCZJkjJxNlNGKaULU0qfBg6gvEfTqcALVYpLkiQpkzyzmc6jnJnZBHgIOIXyzCZJktSR6rxmJs8w08PA2SmlGdUKRpIkKa88XbmbgQMj4icAEbFlROxWnbAkSVJmEbV9dTJ5OjOXAh8AjqkcL6yckyRJ6jB5hpl2TyntEhFPAKSU5kVEtyrFJUmSlEmezkxzRDRS2R07IvoDpapEJUmSsmuo7wLgPE9/EfAHYEBEnAE8AJxZlagkSZIyyrOdwfUR8RiwPxDAJ1NKz1UtMkmSlEm9L5rXZmcmInqklBZERB9gJnBDq2t9UkpzqxmgJEnS2mTJzPwGOIzyqr+p1fmoHG9ThbgkSVJWLpq3dimlwyo/h1Y/HEmSpHzybGdwG3AjcFtKaXH1QpIkSXmkOs/M5Hn684G9geci4vcRcWREdK9SXJIkSZnkmc00DhhXWWtmP+AE4CqgR5VikyRJWTibKbuI2BD4GHAUsAtwbTWCkiRJyipPzcxvgd2BuyjvyXRfSskVgCVJ6mD1XjOTJzNzNXBMSqmlWsFIkiTllacrNx74YUSMBYiI4RFxWHXCkiRJmUXU9tXJ5OnMXA00AXtWjqcBp7d7RJIkSTnkGWYallI6KiKOBkgpLYnI3j3bdphr7lXboc0TOzoESVJHqPOamTxP31SZzZQAImIYsKwqUUmSJGWUKTNTycBcQXkm05CIuB74IHBc1g/61DdfXJf4lMEfLhkOwCe+Zmammm67fAQAd3Qd0cGRrL/MLkpaF5k6MymlFBEnAQcBe1DeZPKklNLsagYnSZLaljphUW4t5amZeRjYJqV0R7WCkSRJyitPZ2Zf4CsRMRlYRDk7k1JKO1YlMkmSlE2dFwDn6cx8tGpRSJIkraM8G01OrmYgkiRp3STqu2amvvNSkiSp8HLtmi1Jkjqfet9osr6fXpIkFZ6ZGUmSis7MjCRJUnGZmZEkqeDqfQVgMzOSJKnQzMxIklRwzmaSJEkqMDMzkiQVnTUzkiRJxWVmRpKkgrNmRpIkqcDszEiSpEJzmEmSpIJLWAAsSZJUWGZmJEkqOAuAJUmSCszMjCRJReeieZIkScVlZkaSpIJLdZ6bqO+nlyRJhWdmRpKkgkvWzEiSJBWXmRlJkgrOdWYkSZIKzMyMJEkF595MkiRJBWZmRpKkgrNmRpIkqcDszEiSpEJzmEmSpIJz0TxJkqQCMzMjSVLBOTVbkiSpwMzMSJJUcE7NliRJKjAzM5IkFZw1M5IkSQVmZkaSpIKzZkaSJKnAzMxIklRw9V4zU3edmZ1HbsSXj+xPQwP8798WcMvd897VZs+dN+Gzh/QhAZNea+KCa6YD0K93F75xzAD69e5KSomfXf46s+Yur/ETFMPOozbihM8MpCHg7gfnc/Nf576rzQd32ZSjD+tLSvDqa8s4/6o3gPL3/M3Pb0a/3uU/nmMumcZMv+dcdrzyTAYc8mGaZs5h/M4f6+hwJKmq6qoz0xAw+jP9OfWS15jz5nLO/t6WPPr0IqZNb1rRZlD/rhxxUG9+eP40Fi0p0XOTxhXXTvrCQG76yzyefH4x3bsFpdQRT9H5NQR85bMD+elF05gzr5lzf7AVjz71FlNX+Z6PPLgP3z93CosWl+i56Tvf87ePG8Tv/zyn/D1vEJRKHfEUxTbt2luYdNmv2emqszo6FEk1YM1MHRm+dXfemN3MjDnLWd4CDzy+kN123HilNgfu2YM/j5/PoiXlv0Hnv9UCwBabdaOxIXjy+cUALG1KNDXbm1md4Vt3Z/qsZmbMbmZ5C9w/YSG7vW+TldoctFcv7hz3JosWV77nheXvechm3Whs4J3veZnf87qY+8AEmufO7+gwJKkm6ioz06dnF2bPe2e4Ys685Wy3dfeV2gwe0A2AM0/egoYG+O2dc3niucUMHtCVRUtKfP/4QQzo24WnJi7huttmm51Zjb69ujB7XvOK4znzlrPd0FW/564A/Pw/tqShAW64fTZPPLuYwQO7sWhJiR+MHszAfl158vnF/OoPs/yeJWkt6r1mJnNmJiIGRsQvI+LPleNREfHl6oXW/la3Q/qqf0c2NgaDBnTjJxdO4/xrpvP1Ywaw0YYNNDYEI4d155o/zOJ750xlYL+u7LtHj5rEXTir+55X+aIbG4PBA7ryo/OncO4v3+Cbn9+MjTdsoLEBRm27IVffMovv/nwyA/t1Zb8P9KxN3JKkQsozzHQN8BdgcOX4BeDba2ocEaMjYkJETBg7duy6R9iO5ry5fEVRKUDf3l2YO3/5u9o8+tRbtJRg5pzlvD6zmcH9uzLnzeW8Om0ZM+Ysp1SCR558i2FDNqj1IxTCnHnL6de764rj1X7P85bzyJNvf8/NvDajiUEDujH7zeW8MnUZM2Y3l7/nf7zFsC39niVJa5anM9MvpfQ7oASQUloOtKypcUppbEpp15TSrqNHj/4Xw2wfL05eyqD+3RjQtwtdGmGvXTbl708tWqnNI0++xQ7bbQTAphs3MHhAV2bMaealyUvZeMNGelQKgncYsdFKBa16x4uTlzJoQFcG9O1Kl0bYe9dNefSpt1Zq8/CTC9lhxNvfcyObD+jGjNlNvDRpKZts1LDie95xxEZMfcPvWZLWJkXU9NXZ5KmZWRQRfamMzETEHkChKgxLJbjydzP56Tc2pyHgnocXMHV6E0cf2oeXpizj708v4onnFrPTyI246EdbUkpw7a2zWbioXKR67a2zOe3EzYmAl6cs4+4HC/X4NVMqwdgbZ3LqieW6o3v+Np+pbzRxzGF9eWnKUh59ahFPPLuYnUduzCWnbE1LCa75w6wV3/PVN8/iZycNgYCXpyzlrw+82cFPVDw7XXcefffZjW79erPfq+N4cczFTL36po4OS5KqItKqxQxrahixC3Ax8F7gn0B/4MiU0lMZbk+f+uaL6xyk1u4PlwwH4BNfm9jBkazfbrt8BAB3dB3RwZGsvw5t9s+w1is1S2G89PKrNZ0mse2woZ0qPZM5M5NSejwi9gFGUP4HNDGl1NzGbZIkSVWVZzbTN4BNUkrPpJT+CWwSEV+vXmiSJCmLRENNX51NnohOSCmtKF5IKc0DTmj/kCRJkrLLUwDcEBGRKkU2EdEIdKtOWJIkKat6XzQvT2fmL8DvIuIKyjOavgrcVZWoJEmSMsrTmfk+8BXga5QLgP8K/KIaQUmSpOzMzGSUUioBl1dekiRJnULmzkxEfBA4Fdiqcl8AKaW0TXVCkyRJWZiZye6XwMnAY6xlGwNJkqRaytOZmZ9S+nPVIpEkSevEzEx290bEOcAtwLK3T6aUHm/3qCRJkjLK05nZvfJz11bnErBf+4UjSZLySsnMTCYppX2rGYgkSdK6yJOZISIOBbYHur99LqU0pr2DkiRJyirP1OwrgI2AfSkvlnck8GiV4pIkSRnVewFwno0m90wpfQGYl1I6DfgAMKQ6YUmSJGWTZ5hpaeXn4ogYDMwBhrZ/SJIkKY96z8zk6cz8KSJ6AecAj1OeyXRlVaKSJEnKKNMwU0Q0APeklN5MKd1MeUuD96SUTqlqdJIkqU2JqOmrLRFxcERMjIiXIuIHq7m+ZUTcGxFPRMRTEXFIq2s/rNw3MSI+kuX5M3VmKptMntfqeFlKaX6WeyVJUv2IiEbgUuCjwCjg6IgYtUqzHwO/SyntDHwWuKxy76jK8fbAwcBllfdbqzwFwH+NiCMior4H5iRJ6mRSipq+2rAb8FJK6ZWUUhNwI/CJVUMGelR+7wm8Xvn9E8CNlaTJq8BLlfdbqzw1M98BNgaWR8RS3tk1u8fab5MkSXVkc2Bqq+NpvLOLwNtOpZwkOZFy3+KAVvc+vMq9m7f1gZkzMymlTVNKDSmlbimlHpVjOzKSJHWwElHTV0SMjogJrV6jW4WzutRNWuX4aOCalNIWwCHAdZX63Cz3vkveFYB7A8NZeQXg8XneQ5IkFVtKaSwwdg2Xp7HyOnRb8M4w0tu+TLkmhpTSQxHRHeiX8d53yZyZiYjjgfHAX4DTKj9PzXq/JEmqjk42m+nvwPCIGBoR3SgX9P5xlTZTgP0BImIk5STJrEq7z0bEBhExlHICpc3dBvIUAJ8EvB+YXNl0cufKB0uSJAGQUloOfJNy0uM5yrOWnomIMRHx8Uqz7wInRMSTwA3AcansGeB3wLPAXcA3UkotbX1mrhWAU0pLI4KI2CCl9HxEjMhxvyRJqoIMM4xqKqV0J3DnKudOafX7s8AH13DvGcAZeT4vT2dmWmUF4FuBuyNiHhnGsSRJkqopc2cmpfSpyq+nRsS9lOeF31WVqCRJUmbuzZRDROwFDE8pXR0R/SnP/X61KpFJkiRlkGc200+B7wM/rJzqCvy6GkFJkiRllScz8ynKM5geB0gpvR4Rm1YlKkmSlFlnKwCutTxTs5tSSonKSnwRsXF1QpIkScouT2bmdxHxP0CviDgB+BJwZXXCkiRJWVkAnFFK6dyIOBBYAGwHnJJSurtqkUmSJGWQazYT8DSwIeWhpqfbPxxJkpSXNTMZVfZmehQ4HDgSeDgivlStwCRJkrLIk5n5HrBzSmkOQET0Bf4GXFWNwCRJUjaljg6gg+WZzTQNWNjqeCEwtX3DkSRJyidPZuY14JGIuI1yzcwngEcj4jsAKaXzqxCfJElqQ73XzOTpzLxceb3ttspPF86TJEkdJs/U7NMAIqJH+TAtbOMWSZJd45JNAAAgAElEQVRUA/W+zkye2Uy7RsTTwFPA0xHxZET8W/VCkyRJalueYaargK+nlO6HFTtoXw3sWI3AJElSNvVeM5NnNtPCtzsyACmlB1h5dpMkSVLN5cnMPFrZm+kGyrOZjgLui4hdAFJKj1chPkmS1IZ6r5nJ05nZqfLzp6uc35Ny52a/dolIkiQphzyzmfatZiCSJEnrItdGkxFxKLA90P3tcymlMe0dlCRJyq6UOjqCjpVnavYVlOtkTgQC+DSwVZXikiRJyiRSytadi4inUko7tvq5CXBLSumgDLfXeZ9RklSHalaVO+6ZxTX9e3af7TfqVBXHeYaZllR+Lo6IwcAcYGjWmy+/K09YyuNrB5d/Tn3x2Y4NZD03ZPgoAI49ZXoHR7L+unbMZgDc0XVEB0ey/jq0eWJHhyC1uzydmdsjohdwDvA45WzLlVWJSpIkZVbvi+blmc30s8qvN0fE7UD3lNL8t69HxIEppbvbO0BJkqS1ybMC8AoppWWtOzIVZ7VDPJIkKaeUavvqbNapM7MG9Z3jkiRJHSLXOjNt6IR9NUmS1n+lOs8ntGdmRpIkqebaMzMzqR3fS5IkZeRspowi4n5gPHA/8GBKaWHr6ymlw9s5NkmSpDblGWY6FpgIHAH8LSImRMQF1QlLkiRlVe+zmfKsM/NKRCwBmiqvfYGR1QpMkiQpizzDTC8Ds4HfAL8ETkwplaoVmCRJyiY5mymzi4ApwNHAt4BjI2JYVaKSJEnKKHNnJqV0YUrp08ABwGPAqcALVYpLkiQpkzzDTOcBewGbAA8Bp1Ce2SRJkjpQqRMW5dZSnnVmHgbOTinNqFYwkiRJeeWpmbkZODAifgIQEVtGxG7VCUuSJGWVUtT01dnk6cxcCnwAOKZyvLByTpIkqcPkGWbaPaW0S0Q8AZBSmhcR3aoUlyRJyqgzLmRXS3kyM80R0Uhld+yI6A+4zowkSepQeTIzFwF/AAZExBnAkcCPqxKVJEnKrFTni+bl2c7g+oh4DNgfCOCTKaXnqhaZJElSBm12ZiKiR0ppQUT0AWYCN7S61ielNLeaAUqSpLWr95qZLJmZ3wCHUV71t/XXFZXjbaoQlyRJUiZtdmZSSodVfg6tfjiSJCmvzrj2Sy1lns0UEbdFxNERsVE1A5IkScojz9Ts84G9geci4vcRcWREdK9SXJIkKaNSqu2rs8kzm2kcMK6y1sx+wAnAVUCPKsUmSZLUpjzrzBARGwIfA44CdgGurUZQkiQpO2czZRQRvwV2B+6ivCfTfSklVwCWJEkdKk9m5mrgmJRSS7WCkSRJyitPAfB44IcRMRYgIoZHxGHVCUuSJGWViJq+Ops8nZmrgSZgz8rxNOD0do9IkiQphzzDTMNSSkdFxNEAKaUlEdH5umeSJNWZzjhdupbyZGaaKrOZEkBEDAOWVSUqSZKkjDJlZioZmCsoz2QaEhHXAx8EjqteaJIkKQunZmeQUkoRcRJwELAH5U0mT0opza5mcJIkSW3JUzPzMLBNSumOagUjSZLyMzOT3b7AVyJiMrCIcnYmpZR2rEpkkiRJGeTpzHy0alFIkqR1Vkr1Pbk4z0aTk6sZiCRJ0rrItdGkJEnqfOq9ZibPOjOSJEmdjpkZSZIKzsyMJElSgZmZkSSp4NybSZIkqcDszEiSpEJzmEmSpIJLLppXXyY9N55xt5xBqVTivXt8mvcfOHql6+NuOZOpLz0CwPKmpSx+aw5f//mEFdeXLX2LX535Ubbd8UD2PfKUmsZeJI8+9jiXjf0lpVKJjx50AEd/+oiVrs+YOYuzL7iItxYtolQqcfyx/87u7/83np/4AhdccjlQrs7/wjFHsdeee3TEI3R6O2zbjc8d0oOGgHGPL+GO+xe9q81u23fnk/tuAiSmTF/OFTfNB+AzB23CTtttQETwz5eXcf2dC2sc/fphxyvPZMAhH6Zp5hzG7/yxjg5Hqlt11ZkplVq49/djOPzrV7NJr4HccN6RbLPDfvTdbNsVbfY5/D9X/P6P8dcxc9qzK73HQ3f8N1sM261mMRdRS0sLF18+lrNOP5X+ffvyjZP/H3vuvhtbbTlkRZvrf/t79tn7g3z8kIOZPGUq/3nqz7j+/WPZequtuOy/z6WxsZE5c+fylRNP5gO7v5/GxsaOe6BOKAK+cFgPzr52HnMXtHDqV/ryxPNLeX1Wy4o2A/s0ctiHNub0X8xh8dLEphuXR5W3HdKV7bbsxo8unQPAj4/vw3u27sbzk5o65FmKbNq1tzDpsl+z01VndXQoqnNOza4j0yc/Rc/+W9Gz3xAau3Rju10O5eWn71lj+4mP3cGIXQ5bcTxj6j9ZvHAOW77ng7UIt7AmvvAigwcNYvBmm9G1a1c+/KG9ePDhR1dqExEsXrwYgEWLFtG3Tx8AunffYEXHpampufy3tt5lmy26MmNuC7PmtdDSAo88vZRd3tN9pTb77Loh9zyymMVLy/+VW7ioBEACunYJujRC1y7Q2BDMf6tl1Y9QBnMfmEDz3PkdHYZU93JnZiJi45TSu/PZBbBo/gw27bXZiuNNew1k+uSnVtt2wdzXmD93GkO2Kw9xpFKJ8beexcGfP5spLzxUk3iLavacuQzo32/Fcf9+fXl+4gsrtfnCMUfx/Z+cxq1/upOlS5dy9hmnrbj23MQXOPfCS5gxcxY/+M5JZmVWo/emDcyd/04HZO6CFoZt0XWlNpv1Lf/r/ePj+xABt977Fk+/1MTLU5t57tUmLvzeACLgfx9ZzBuz7cxIRebU7IwiYs+IeBZ4rnL8voi4rGqRVUFabR5u9f/nP/HxOxj+vo/Q0FD+i/TJB37D0FEfYtPeg6oY4fohsZrveZUMy73j7ucj++/Hjdf+gjNP/TE/P++/KZXKmYORI7bjl5ddxKUXnM0Nv7+ZpiaHP1a1uoTVqn+8Gxtgsz5d+K+r5nL57+fzpU/0ZKPuwYA+jQzq38jJ583i2+fOYtQ23RixVdd3v6EkFUSeYaYLgI8AcwBSSk8CH1pT44gYHRETImLC2LFj/7Uo28kmvTZj4ZvTVxwvfHMGG/ccsNq2Lzx+JyP+7dAVx29MeoInx1/PL0/bj/tvO4vnHr2VB/54btVjLqL+ffsyc9bsFcezZs9ZMYz0tj/ffQ/77F0erhs18j00NTUzf8GCldpsNWQI3bt359XJU6ofdMHMXVCiT893MlZ9ejTy5sLSu9o8/vwyWkow+80W3piznIF9Gvm3kRvw8tRmljUlljUlnnpxGcOGdKv1I0hqRynV9tXZ5KqZSSlNXeXUGnPTKaWxKaVdU0q7jh49ek3NamqzLXfgzVmTmD9nKi3Lm3jh8TsY9t793tVu7oxXWLpkAYO23nnFuY9+4Ty+fNp9fPmn/8fen/g+I3f7JHt9/D9qGX5hjNhuOK+9/gZvTJ9Bc3Mz941/gD13f/9KbQb078cTT5aH+CZPnUpzcxO9evbkjekzaGkp/7GaMXMm0157jc0GrL7DWc9efa2ZgX0a6derkcZG2H2H7jzx/LKV2jz+3FJGDi13UjbZKNisbxdmzmthzvwS79m6Gw0N5ezNiK278fqs5R3xGJLULvLUzEyNiD2BFBHdgG9RGXIqiobGLux7xCn84fLjSaUWtt/jCPoOGs5Dd17IgCHvZdgO+wPlIaYROx9CWHy6ThobGznxqyfwg1NOo1QqcfCB+7P1Vltyza9/w3bDt2XP3Xfjq1/+IudffBk33/onIuB73/5WeZrws89x40230KWxkWho4Ftf+wo9e/bo6EfqdEoluO6OBXzvC71paIDxjy/htVnL+dR+mzDptWaemLiMp19q4r3bbsCZ3+xHKSV++5eFLFqS+PszSxk1tBtnfKMfKcHTLy3jHxOXtf2hepedrjuPvvvsRrd+vdnv1XG8OOZipl59U0eHpTrUGbMltRSrryNZTcOIfsCFwAGUC03+CnwrpTQ3w+3p8rvWOUa14WsHl39OffHZtTfUv2TI8FEAHHvK9DZaal1dO6ZcoH9H1xEdHMn669DmiR0dQj2p2f8RX/V/qytWrJ4v7Ve7Z8siT2ZmRErpc61PRMQHgQfbNyRJkpSHs5myuzjjOUmSpJppMzMTER8A9gT6R8R3Wl3qAbgAiCRJHazea2ayDDN1AzaptN201fkFwJHVCEqSJCmrNjszKaVxwLiIuCalNLkGMUmSpBxKpbbbrM/yFAAvjohzgO2BFZvApJTevVCLJElSjeQpAL4eeB4YCpwGTAL+XoWYJEmSMsvTmembUvol0JxSGpdS+hKwR5XikiRJGdX7dgZ5hpmaKz/fiIhDgdeBLdo/JEmSpOzydGZOj4iewHcpry/TAzi5KlFJkqTMOmO2pJYyd2ZSSrdXfp0P7FudcCRJkvLJsmjexbDmPR9SSt9q14gkSVIu9b6dQZbMzISqRyFJkrSOsiyad20tApEkSesm1bxoplNtmp29ZiYi+gPfB0bhonmSJKmTyLto3nO4aJ4kSZ1Kva8z46J5kiSp0Fw0T5KkgnOjyexcNE+SJHU6LponSVLBdcY6llrKXDMTEdtExJ8iYnZEzIyI2yJim2oGJ0mS1JY8BcC/AX4HbAYMBn4P3FCNoCRJUnalVNtXZ5OnMxMppetSSssrr1+zlm0OJEmSaiFPAfC9EfED4EbKnZijgDsiog9ASmluFeKTJEltqPeamTydmaMqP7+yyvkvUe7cWD8jSZJqLs9spqFrux4RB6aU7v7XQ5IkScouT2amLWcBdmYkSaqxVPOq3M610WSeAuC2dK4nkyRJdaE9OzN1Xn4kSVLH6GxTsyPi4IiYGBEvVSYPrXr9goj4R+X1QkS8WTm/U0Q8FBHPRMRTEXHUu9/93dpzmEmSJNW5iGgELgUOBKYBf4+IP6aUnn27TUrp5FbtTwR2rhwuBr6QUnoxIgYDj0XEX1JKb67tM9uzMzOpHd9LkiRl1MmmZu8GvJRSegUgIm4EPgE8u4b2RwM/BUgpvfD2yZTS6xExE+gPrLUzk2c7g/sj4oxK6mjTVa+nlA7P+l6SJGm9tTkwtdXxtMq5d4mIrYChwP+t5tpuQDfg5bY+ME9m5lhgL+AI4JyIWAbc3zpVJEmSaq9U49lMETEaGN3q1NiU0ti3L6/mljUF+FngppRSyyrvPwi4Djg2pVRqK54868y8EhFLgKbKa19gZNb7JUnS+qHScRm7hsvTgCGtjrcAXl9D288C32h9IiJ6AHcAP04pPZwlnsydmYh4GZhNecPJXwInZuktSZKk6upkNTN/B4ZHxFDgNcodlmNWbRQRI4DewEOtznUD/gD8KqX0+6wfmGdq9kXAFMqFOt8Cjo2IYTnulyRJ67mU0nLgm8BfgOeA36WUnomIMRHx8VZNjwZuTGmlrthngA8Bx7Waur1TW5+ZZ5jpQuDCiNgE+CJwKuXUUWPW95AkSe2vk2VmSCndCdy5yrlTVjk+dTX3/Rr4dd7PyzPMdB7lAuBNKKeETgHuz/uBkiRJ7SnPbKaHgbNTSjOqFYwkScqv1NlSMzWWp2bmZuDAiPgJQERsWZkDLkmS1GHyZGYuBUrAfsDPgIWUOzjvr0JckiQpo3qfW5ynM7N7SmmXiHgCIKU0rzKFSpIkqcPkGWZqrmwelQAioj/lTI0kSVKHyZOZuYjyQjYDIuIM4Ejgx1WJSpIkZZbqvAA4zzoz10fEY8D+lPdd+GRK6bmqRSZJkpRBm52ZiOiRUloQEX2AmcANra71SSnNrWaAkiRp7Up1XvSRJTPzG+Aw4DFW3vUyKsfbVCEuSZKkTNrszKSUDqv8HFr9cCRJUl71XjOTeTZTRNwWEUdHxEbVDEiSJCmPyNqbi4h9gKOAQ4FHgd8Ct6eUlma4vb67jJKkehS1+qAfX9NU079nTz+uW82eLYs8s5nGAeMqa83sB5wAXAX0qFJskiRJbcqzzgwRsSHwMcoZml2Aa7Pe+5sHTM5UyzF7lTvIS+++pmMDWc91P/A4APb62LiODWQ99sCf9gFg4stTOziS9deIYUMAuKPriA6OZP12aPPEmn5eKtX337GZOzMR8Vtgd+Auyvs03ZdSve8GIUmSOlqezMzVwDEppZZqBSNJkvKr88lMufZmGg/8MCLGAkTE8Ig4rDphSZIkZZM3M/MYsGfleBrwe+D29g5KkiRlV6rzmpk8mZlhKaWzgWaAlNISajjtTJIkaXXyZGaaKrOZEkBEDAOWVSUqSZKUWb2vAJypMxMRAVxBeSbTkIi4HvggcFz1QpMkSWpbps5MSilFxEnAQcAelIeXTkopza5mcJIkSW3JM8z0MLBNSumOagUjSZLyq/dV3/J0ZvYFvhIRk4FFlLMzKaW0Y1UikyRJyiBPZ+ajVYtCkiSts5IFwNmklCZXMxBJkqR1kWujSUmS1PnU+9TsPIvmSZIkdTpmZiRJKji3M5AkSSowMzOSJBVcnZfMmJmRJEnFZmZGkqSCS9bMSJIkFZeZGUmSCq7eVwA2MyNJkgrNzIwkSQVnzYwkSVKB2ZmRJEmF5jCTJEkF5zCTJElSgZmZkSSp4Oo8MWNmRpIkFZuZGUmSCs6aGUmSpAIzMyNJUsEltzOQJEkqLjMzkiQVXMmaGUmSpOIyMyNJUsFZMyNJklRgZmYkSSo415mRJEkqMDMzkiQVnJkZSZKkArMzI0mSCs1hJkmSCq7k1GxJkqTiMjMjSVLBWQAsSZJUYGZmJEkqOLczkCRJKrC6y8y89PT93HXDGZRSiV32PpK9Dhm90vW7bvwvJj3/CADNTUtYtGAuP7jk7wCMOX4UA7bYDoCefQZx9Lcur23wBfLgsy9z1k3/S6lU4lN77sSXD/rAStffmDufH193OwuXLKNUKnHSJz7M3ttvS3NLC6ddfyfPTZ1BS6nEx3Z7L1/+yJ4d9BSd2+679OakE7aloSG4/e43+PVNU9/VZr+9+vPFo7cC4KVX3+K0c59nYP8NOPM/t6ehIejSJbjpT69x211v1Dr8QnhswqP84n8uo6VU4qCPfJQjP3P0StdnzZzBf59/Nm+99RalUoljv3g8u75/dxYsmM9ZZ47hxRcmst8BH+GrXz+xg56g+Ha88kwGHPJhmmbOYfzOH+vocDqtUp3XzNRVZ6ZUauHO68fw79+9ih69B3Llzz7NiJ32o//gbVe0OfizP1zx+yP3XMf0yc+tOO7SrTtfPfXWmsZcRC2lEmf+7q/8zzc/y8BePTjmnGv48A7DGTao34o2V971Nz6yy0g+s/cuvPzGbL55+e/485htufvx52la3sLNPzqeJU3NHH76lRy86yg279urA5+o82logO98dTgn/+QpZs5Zxi/O34UHHpnDpKmLV7TZYtCGfP7IIXz9//2DhYuW06tnVwDmzGviq997gubliQ27N/CrS97PA4/OYc7cpo56nE6ppaWF/7nsYsaccRZ9+/Xnu9/+BrvtsSdbbrnVija/vfF6Prj3Phxy6MeZMmUyY075T35xzfV069aNz/37cUyeNInJkyd13EOsB6ZdewuTLvs1O111VkeHok6sroaZXnvlKfoM2JLe/YfQ2KUb2+92CM8/cc8a2//zkTt47+6H1jDC9cM/J73OkH692aJfb7p2aeTgXUZy31MvrNwo4K2lywB4a8lS+vfcpHw6YElTM8tbSixraqZLYwObdN+g1o/Q6Y0c3oNpbyzh9RlLWb488b/jZ7LX7n1XavOxjwziljtfZ+Gi5QC8Ob8ZgOXLE83Ly/8X17VrAw119V+B7F58YSKDBg9ms0GD6dq1K3t/6MM88tCDK7WJCJYsLncgFy9aRJ++5X8G3btvyKjtd6Bbt241j3t9M/eBCTTPnd/RYXR6qZRq+ups2szMRMTha7ueUrql/cKproVvzqBHn0Erjnv03ozXXn1ytW3fnP0ab85+jaEj91hxbnnzMsaOOYKGxi7s9dETeM8uB1Q95iKaOf8tNuvdY8XxgN6b8vSk11dq87VD9uarl9zIDeMeY8myZsae+FkADtj5Pdz71Isc8KOLWNK0nO8dvj89N96wpvEXQf++3Zg5e9mK41lzljFqux4rtRmyefl7u+ysnWhsCK66YRKPPD4PgAH9NuDsU97LFoM35LKrXjErsxpz5symX78BK4779evPxInPr9Tm6M99gZ/+6Pvc/sdbWbpsKT874+xahymJbMNMaxukTEBhOjOrL/aO1bb956N3MvLfDqKhoXHFuZPP/j827T2QebOmcu05xzJgi+3oM2DL6gRbYKurqo9Vvuc/T3iWj++xA8fuvztPvjKNH/3qT9z8nyfwz0lv0NgQ3H3GiSxYvJQvXvBr9njP1mzRr3etwi+EWM0f21W/9sbGYMjgDTnxP59kQL8NuPTnO/GFb/6dtxa1MHP2Mo771mP07dON//rR9tz7t1nMe7O5NsEXxGr/HK/yvY+/7172O/AjfOrwT/P8c89ywbk/5+LLf0GD6S7VmLOZ2pBS+uJaXl9a030RMToiJkTEhLFjx7Zv1OuoR++BLJj7TqHjgnnT2bTXgNW2febRO9lhlSGmTXsPBKB3/yFsPWI3pk95tnrBFtjAXpsyfd6CFccz5y1kQGUY6W1/eOhJPrLLSADet80WLGtuYd6ixfx5wjPsOWobujY20nfTjdlpmy14Zsr0msZfBDNnNzGg3zvDb/37bsDsuctWajNr9jLuf2Q2LS2JN2YsZcpri9li8EYrtZkzt4lXpyzmfaN61iTuIunXrz+zZ89ccTx79iz69Fl5KO/uv/6ZvfbeB4D3jBxFU3MTCxY4JCLVWpudmYj4ztpea7ovpTQ2pbRrSmnX0aNHr6lZTW0+dAfmzJjMvFnTaFnexDOP3smInfZ7V7vZ019hyeL5bDFs5xXnliyaz/Lmcip+8cJ5TH3piZUKh/WO7bcazJRZ85g2+02al7dw1+PPsc+Ow1dqM6hPDx6ZOAmAV6bPpql5OX022YjN+vTg0YmTSSmxeFkTT096jaED+67mU+rb8y8uYMjgDRk0sDtdugQHfGgADz46Z6U29z88m112KBdO9+zRhSGDN+T16Uvo37cb3bqV/9XfdOMu7DiyB1NeW1LzZ+jshm83gtdff43p09+gubmZ+8ffx+57rDyzrn//ATz1jycAmDplMs1NzfTsabG6ai+VSjV9dTZZhpk2rXoUNdLQ2IVDPvcTfn3Bl0mlEjvtdQQDNh/OvbdexOCt/397dx5mR1Xmcfz7y4LBgSABVAYCgZDgEpERCATCLgyCEXSAqIhENIjD5gIqzyATEJ3RAdwIYHQgGNkURiCEARGhwxaIiAESBCUEAXEBg4Q9pF//OKeh0rndXRVudd+kf5/nuU/XrfW9762ue+rUqVNjXi3Y3HfHLMaM3Q8V6pSffOIhrv7RfyINIKKdnfad7MJMFwYNHMCJB+/FZ6ZeQnsEB+ywFVtsuAFTr57NOzfZkN22GsUXPrgnp158DT++cS4CTj005fvDu2zDyT+exYe+9kMg2H+HrRi9UePas/5sWTucee7vOfOUdzFggJj1iz/x8B+e55OHjOC3v1vCrXc+xR2/Xsx2/zKMGVO3pb09OPv8hTyz5BW23Xpdjj5881fXdfHPHmPhI8/14adpTQMHDuTTnzmGKSd9mfb2dt679z5ssukILpwxnS1GjWb7HXbk8MlHctZ3zuTKKy5HEsd9/oRXjxufmnQIzz//PK+8spQ7br+VU772jeXuhLJytp5xBuvtOpY11l+XPR5u43enfo9Hz7+sr8OyFqNeus4WF93Sv6/n1emj49PB88Xrp/dtIKu5IXtNAmD8hLa+DWQ1dsvMdMnmgYdW7DPHmmPLkcMBmDV4yz6OZPW239IHoKtGmTWYePwjvfoje+npm/baZyujdD8zkoYAnwTeCQzpGN9duxkzMzOzulVpcj8DeCvwr0AbsDGwpI6gzMzMzMqq0gPwFhFxkKT9I+ICSRcB19UVmJmZmZXjW7PL6+iE4mlJY4B1gBFNj8jMzMysgio1M9MkrQucBFwFrAV8pZaozMzMrLRWfMRAbypVmJE0AHgmIhYDs4HNe1jEzMzMrFeUKsxERLuko4Gf1ByPmZmZVdTfa2aqtJm5XtLxkoZLGtbxqi0yMzMzsxKqtJnp6E/mqMK4wJeczMzM+lR7tN4jBnpT6cJMRGxWZyBmZmZmK6NKD8BvBD4PbBIRR0gaBWwZEVfXFp2ZmZn1yG1myjsfeBnoeGzsY8BpTY/IzMzMrIIqbWZGRsRESR8BiIgXVHystJmZmfUJ18yU97KkNUmNfpE0EniplqjMzMzMSqpSMzMFuBYYLulCYCdgUg0xmZmZWQX9/dlMVe5m+rmku4AdAAHHRcSTtUVmZmZmVkKVu5muAi4GroqI5+oLyczMzKpob+/f/cxUaTNzBrAzsEDSTyUdKGlITXGZmZmZlVLlMlMb0CZpILAHMBk4DxhaU2xmZmZmParSAJh8N9MEYCLwHuCCOoIyMzOz8vr7rdlV2sxcCmxPuqNpKnBTRD9/GISZmZn1uSo1M+cDH42IZXUFY2ZmZtX197qFKoWZG4CjJO2S37cB50bE0uaHZWZmZlZOlcLMOcBg4Oz8/tA87lPNDsrMzMzKc5uZ8raLiHcX3v9S0rxmB2RmZmZWRZXCzDJJIyPiIQBJmwNuP2NmZtbHXDNT3gnAjZIWkh5nsCnwiVqiMjMzMyupSqd5N0gaBWxJKsz8NiJefWq2pL0i4voaYjQzM7NutPfzu5mqPM6AiHgpIu6JiHnFgkz2jSbGZWZmZlZKpR6Ae6AmrsvMzMxK6u9tZirVzPSgf2fSzMzM+kQza2bMzMysD0S728w0y6ImrsvMzMyslCoPmrwZmA3cDNwaEUuK0yPiQ02OzczMzEpwm5nyDgMeAP4NuE3SryR9q56wzMzMzMqp0s/MQkkvAC/n1+7A2+sKzMzMzKyMKpeZHgKeBC4C/hc4Jvr7M1CrYdEAAAvlSURBVMfNzMxaQH//Oa5ymem7wB+AjwDHAodJGllLVGZmZmYllS7MRMR3IuIg4L3AXcAU4MGa4jIzM7OS2tujV189kbSPpAck/V7Sl7uY52BJCyTNl3RRp2lDJT0u6awyn7/KZaYzgPHAWsDtwMmkO5vMzMzMAJA0EJgK7AU8BsyVdFVELCjMMwo4EdgpIhZLenOn1XwVaCu7zSqd5s0BvhkRf66wjJmZmdWsxTrNGwv8PiIWAki6BNgfWFCYZzIwNSIWA0TEXzomSNoGeAtwLbBtmQ1WaTNzObCXpK/kjW0iaWyF5c3MzGz1txHwaOH9Y3lc0WhgtKRbJc2RtA+ApAHAGcAJVTZYpWZmKtAO7EGq/llCKuBsV2WDZmZm1ly93WmepCOAIwqjpkXEtI7JDRbpHOAgYBSwG7AxcLOkMcDHgGsi4lGp/POrqxRmto+I90i6GyBf41qjwvJmZma2GsgFl2ldTH4MGF54vzHwxwbzzImIpcDDkh4gFW7GATtL+ndSG901JD0bEQ0bEXeoUphZmhv1BICkDUg1NWZmZtaHWqyfmbnAKEmbAY8DHwY+2mmeK0hdvUyXtD7pstPCiDikYwZJk4BteyrIQPV+Zn4GvFnS14BbgK9XWN7MzMxWcxHxCnA0cB1wP/CTiJgv6VRJH8izXQc8JWkBcCNwQkQ8tbLbrPI4gwsl3QXsSboedkBE3L+yGzYzM7PmaLUHTUbENcA1ncadXBgO4PP51dU6pgPTy2yvx8KMpKER8YykYcBfgIsL04ZFxN/KbMjMzMysDmVqZi4C3k/q9bdY9FN+v3kNcZmZmVlJLdbPTK9TqumpXWvVf5mZmdWv/L3Fr9P4CW29+jt7y8xde+2zlVG6MCPpSuAS4MqIeL7WqFqApCMK98xbDZzj+jnHvcN5rp9zbN2pcjfTmcDOwP2SfirpQElDaoqrFRzR8yz2OjnH9XOOe4fzXD/n2LpU5W6mNqAt9zWzB+m5CucBQ2uKzczMzKxHVTrNQ9KawARgIvAe4II6gjIzMzMrq3RhRtKlwPakp1hOBW6KFutysMl8bbZ+znH9nOPe4TzXzzm2LlVpALwPcH1ELKs3JDMzM7PyqjQAng2cKGkagKRRkt5fT1hmZmZm5VQpzJwPvAzsmN8/BpzW9IjMzMzMKqhSmBkZEd8ElgJExAv0YodAZUi6RtKb+jqO/qSunEv6rKQ3ruSyB0h6R7NjWhneJ1tbq3w/kiZJOquHeXaTtGN387SaVsnv6yVpiqTj8/B0SQf2dUy2vCqFmZfz3UwBIGkk8FItUaX1S1KV+IiIfSPi6bpi6o6kSneGtaIWy/lngZUqzAAHAE0vzLRYflpC7qqhJfSD72c3XqsZ73Wre35baV+26krtmJIEnEu6k2m4pAuBG4AvNjMYSSMk3S/pbODXwKGSbpf069xR31qS3ifpJ4VldpM0Mw8vkrR+Hv6YpDsl/UbS9yUNlHSwpDPz9OMkLczDIyXd0k1cJ0uaK+k+SdNyPpB0k6SvS2oDjpO0qaQbJN2T/26S55su6RxJN0paKGlXSeflzzq9sJ1zJP1K0nxJpzQzt918tpbLuaRjgX8GbpR0Yx7XMDeS/lvSgpzz0/OZ6weA/8lxjMyvayXdJelmSW9blfOTp3e3T35b0m152tg8foqkGZJ+Kel3kiYX1nVCXtc9nXJ7Rc7ZfElHFMY/K+lUSXcA43qI5Rv5Mz8oaec8fmD+ru7N2zwmj99GUlve5nWSNlyFv59Fhc9+p6Qt8vgJku6QdLekX0h6S4NlV5hH0gjgSOBzOb6dJW0g6fKc+7mSduopX1W1cH73zPm5V+lY+oYe4ti7c9yF+E7O2zpI0uScy3k5tyt7QmW9LSJKvUgPmlwP2I/04Mn1yy5bYRsjgHZgB2B9UqPjf8rTvgScTLqd/A+F8ecAH8vDi/JybwdmAoPz+LOBjwNvBebmcZcBc4GNgMOA/+omrmGF4RnAhDx8E3B2YdpM4LA8fDhwRR6eTnoUhID9gWeAd5EKk3cBWxe3AwzM696q2TlehXK+qLiPNcoNMAx4gNfuyntTId8HFpa9ARiVh7cHfrka5Ke7ffIHeXgX4L48PAWYB6yZ43mUVGDcm3TLq0j749XALp1yviZwH7Befh/AwSVjOSMP7wv8Ig9/BrgcGNSxPDAYuA3YII+bCJy3Cn8/i4D/yMMfB67Ow+vy2v76qUJ+JgFn9TDPFOD4wjYuAsbn4U2A+/vD8QEYQtp/R+f3PyLV5DaMo6u4C/F9sbDu9QrDpwHHdM49nY4vfrXGq8qlkTnA5hExq8IyK+ORiJijdKfUO4Bb84neGsDtEfGKpGuBCZIuIxWuOtcQ7QlsA8zNy64J/CUi/pTPJNYGhpMOBruQHtPwf93EtLukL5IuewwD5pP+MQEuLcw3DvhQHp4BfLMwbWZEhKR7gT9HxL0AkuaTDhi/AQ5WOgMeBGyYP/893WarOVox5501ys0C4EXgh5JmkX6Il5PPwHYEfprjAnhDhe1Ca+anu33yYoCImC1pqF5rs3BlpLZuLyjVeI0FxpMKNHfnedYCRpEO/sdK+mAePzyPfwpYRiqMlIml4zPcRdrPAd4LnBsRr+Q4/yZpDDAGuD7nZyDwRDefv6gVvx/I30P++608vDFwqVKt0xrAww2WKzMPpDy+o7BfD5W0dkQs6SGuqlotv1sCD0fEg/n9BcBREfHtLuLYtVHchfUVj+FjJJ0GvIn0v3Bd6SxZn6pSmNkd+LSkR4DnSGdyERFbNTmm5/Jfkfq1+UiDeS4FjgL+RirVd/7nFXBBRJzYYNnbgU+QzuhvJtWgjAO+0CgYpedPnQ1sGxGPSppCOjPoHG8jxU58OtoXtbN8W6N2YJCkzYDjge0iYrHS5afeevZVS+W8s65ykw+iY0kHyg8DR5MetVE0AHg6IrYus60utFR+SuyTnTuPim7Gi3QG/P1O29iN9GM5LiKel3RTYRsvRu5vqkQsHfv6Ml473qhBLALmR8S4Rp+5By31/RREg+HvAWdGxFU5x1MaLFdmHkj79rhcQK1Tq+W3uxtPVohDqQTTVdyw/DF8OnBARMyTNInUTslWAVUac70PGEn6sZhAutQ0oY6gsjnATnrtWvMbJY3O024iPU5hMsuXqjvcABwo6c152WGSNs3TZpN+GGeTzkZ3B16KiL93EUfHgfnJfJbfXSv220g/qgCHAF1e821gKOmf6u9K19HfV2HZZmmVnAMsAdbOww1zk7+PdSLiGlI189adl42IZ4CHJR2Ul5Gkd5dLxwpaJT897ZMT8zbGA38vrGd/SUMkrUc6SM8lnXkeXmhDsFGOcR1gcS7IvI10mWFlYmnk58CRyo3mJXVcLtxA0rg8brCkd5ZYV1GrfD8dJhb+dtQErAM8nocP62K5ruYp/k9AyuPRHW8kvZ4Cexmtkt/fAiM64gAOBdq6iaO7uDtbG3hC0mDSMdxWEVUeNPlInYE02N5fc8n4YkkdlwVOAh6MiGWSriZdZ17hgBARCySdBPxcqfX9UlJp/RFSyX84MDuv51HSP0dXcTwt6QfAvaTrq3O7CftY4DxJJwB/JZ1tlP288yTdTaqiXwjcWnbZZmmVnGfTgP+X9ERE7N5FbtYGrsy1AwI+l8dfAvxAqSHxgaSD0jk5vsF5+rwqucmfsSXyU2KfXCzpNlIh8PDC+DuBWaT2FV+NiD8Cf5T0duD2XAX/LKmdwbWkAsc9pILGnJWMpZEfAqOBeyQtJbXxOUvpdtfvSlqHdGz6Nuk7L6VVvp+CNyg1kh4AdNQKTCFd8nyclNPNGizX1Twzgcsk7Q8cQzreTM3f0SBSYeDIEnGtlFbJb0S8KOkTpBwNIu1z5+ZpK8TRXdwNVv8V4I4c170sX3i0Flb6cQZm1vry5aDjI+JXncZPAZ6NiNP7Iq7+RtIi0qW3J/s6FrP+oFKfAWZmZmatxjUzBZJ+xorVvl+KCLdor4lz3j3np7X5+6mX82tluTBjZmZmqzRfZjIzM7NVmgszZmZmtkpzYcbMzMxWaS7MmJmZ2SrNhRkzMzNbpf0D4kjGKpp/4RUAAAAASUVORK5CYII=\n",
      "text/plain": [
       "<Figure size 720x720 with 2 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Created an heatmap using seaborn which shows an better visualization of the correlation between the overall review and the other features\n",
    "plt.figure(figsize=(10,10))\n",
    "masking = np.zeros_like(correlation)\n",
    "masking[np.triu_indices_from(masking, k=1)] = True\n",
    "sns.heatmap(correlation, annot=True, linewidths=.8,mask=masking, cmap=\"coolwarm\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "metadata": {},
   "outputs": [],
   "source": [
    "# ANSWER : Hence from the heatmap we get an better inference that :\n",
    "# Firstly the the \"review_taste\" has the highest positive correlation of (0.88) with the overall quality of the beer\n",
    "# Secondly the the \"review_palate\" has an  second highest positive correlation of (0.81) with the overall quality of the beer\n",
    "# Thirdly the the \"review_aroma\" has a positive correlation of (0.75) with the overall quality of the beer\n",
    "# Fourthly the the \"review_appeareance\" has a low positive correlation of (0.63) with the overall quality of the beer\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## TASK 4 - Lastly, if I typically enjoy a beer due to its aroma and appearance, which beer style should I try?"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead tr th {\n",
       "        text-align: left;\n",
       "    }\n",
       "\n",
       "    .dataframe thead tr:last-of-type th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr>\n",
       "      <th></th>\n",
       "      <th>review_aroma</th>\n",
       "      <th>review_appearance</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th></th>\n",
       "      <th>mean</th>\n",
       "      <th>mean</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>beer_style</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>Altbier</th>\n",
       "      <td>3.624015</td>\n",
       "      <td>3.809327</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>American Adjunct Lager</th>\n",
       "      <td>2.480211</td>\n",
       "      <td>2.788546</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>American Amber / Red Ale</th>\n",
       "      <td>3.627254</td>\n",
       "      <td>3.810190</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>American Amber / Red Lager</th>\n",
       "      <td>3.213296</td>\n",
       "      <td>3.527494</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>American Barleywine</th>\n",
       "      <td>4.019343</td>\n",
       "      <td>4.036535</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>American Black Ale</th>\n",
       "      <td>3.930456</td>\n",
       "      <td>4.112922</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>American Blonde Ale</th>\n",
       "      <td>3.313296</td>\n",
       "      <td>3.508879</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>American Brown Ale</th>\n",
       "      <td>3.783314</td>\n",
       "      <td>3.887437</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>American Dark Wheat Ale</th>\n",
       "      <td>3.499660</td>\n",
       "      <td>3.671088</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>American Double / Imperial IPA</th>\n",
       "      <td>4.097782</td>\n",
       "      <td>4.078916</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                               review_aroma review_appearance\n",
       "                                       mean              mean\n",
       "beer_style                                                   \n",
       "Altbier                            3.624015          3.809327\n",
       "American Adjunct Lager             2.480211          2.788546\n",
       "American Amber / Red Ale           3.627254          3.810190\n",
       "American Amber / Red Lager         3.213296          3.527494\n",
       "American Barleywine                4.019343          4.036535\n",
       "American Black Ale                 3.930456          4.112922\n",
       "American Blonde Ale                3.313296          3.508879\n",
       "American Brown Ale                 3.783314          3.887437\n",
       "American Dark Wheat Ale            3.499660          3.671088\n",
       "American Double / Imperial IPA     4.097782          4.078916"
      ]
     },
     "execution_count": 20,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Transfered the required features into a new data and grouped the data and performed an aggregate function on it\n",
    "beer_style=data[[\"review_aroma\",\"review_appearance\", \"beer_style\"]]\n",
    "beer_style_grouped=beer_style.groupby(\"beer_style\").agg({\"review_aroma\":[np.mean],\"review_appearance\":[np.mean]})\n",
    "beer_style_grouped.head(10)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead tr th {\n",
       "        text-align: left;\n",
       "    }\n",
       "\n",
       "    .dataframe thead tr:last-of-type th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr>\n",
       "      <th></th>\n",
       "      <th>review_aroma</th>\n",
       "      <th>review_appearance</th>\n",
       "      <th>Total_Mean_Ratings</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th></th>\n",
       "      <th>mean</th>\n",
       "      <th>mean</th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>beer_style</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>American Double / Imperial Stout</th>\n",
       "      <td>4.160665</td>\n",
       "      <td>4.163633</td>\n",
       "      <td>4.162149</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Russian Imperial Stout</th>\n",
       "      <td>4.076576</td>\n",
       "      <td>4.210072</td>\n",
       "      <td>4.143324</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Quadrupel (Quad)</th>\n",
       "      <td>4.132533</td>\n",
       "      <td>4.117964</td>\n",
       "      <td>4.125249</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>American Double / Imperial IPA</th>\n",
       "      <td>4.097782</td>\n",
       "      <td>4.078916</td>\n",
       "      <td>4.088349</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Gueuze</th>\n",
       "      <td>4.117574</td>\n",
       "      <td>4.034864</td>\n",
       "      <td>4.076219</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>American Wild Ale</th>\n",
       "      <td>4.126756</td>\n",
       "      <td>4.005451</td>\n",
       "      <td>4.066104</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Eisbock</th>\n",
       "      <td>4.156778</td>\n",
       "      <td>3.964514</td>\n",
       "      <td>4.060646</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>American Barleywine</th>\n",
       "      <td>4.019343</td>\n",
       "      <td>4.036535</td>\n",
       "      <td>4.027939</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Belgian IPA</th>\n",
       "      <td>3.979753</td>\n",
       "      <td>4.075214</td>\n",
       "      <td>4.027484</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Weizenbock</th>\n",
       "      <td>4.044677</td>\n",
       "      <td>4.009297</td>\n",
       "      <td>4.026987</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                                 review_aroma review_appearance  \\\n",
       "                                         mean              mean   \n",
       "beer_style                                                        \n",
       "American Double / Imperial Stout     4.160665          4.163633   \n",
       "Russian Imperial Stout               4.076576          4.210072   \n",
       "Quadrupel (Quad)                     4.132533          4.117964   \n",
       "American Double / Imperial IPA       4.097782          4.078916   \n",
       "Gueuze                               4.117574          4.034864   \n",
       "American Wild Ale                    4.126756          4.005451   \n",
       "Eisbock                              4.156778          3.964514   \n",
       "American Barleywine                  4.019343          4.036535   \n",
       "Belgian IPA                          3.979753          4.075214   \n",
       "Weizenbock                           4.044677          4.009297   \n",
       "\n",
       "                                 Total_Mean_Ratings  \n",
       "                                                     \n",
       "beer_style                                           \n",
       "American Double / Imperial Stout           4.162149  \n",
       "Russian Imperial Stout                     4.143324  \n",
       "Quadrupel (Quad)                           4.125249  \n",
       "American Double / Imperial IPA             4.088349  \n",
       "Gueuze                                     4.076219  \n",
       "American Wild Ale                          4.066104  \n",
       "Eisbock                                    4.060646  \n",
       "American Barleywine                        4.027939  \n",
       "Belgian IPA                                4.027484  \n",
       "Weizenbock                                 4.026987  "
      ]
     },
     "execution_count": 21,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#Took the average of the means of \"review_aroma\" and \"review_appearance\" for each \"beer_style\"  \n",
    "beer_style_grouped[\"Total_Mean_Ratings\"]=((beer_style_grouped[\"review_aroma\",\"mean\"] + beer_style_grouped[\"review_appearance\",\"mean\"])/2)\n",
    "beer_style_grouped.sort_values(\"Total_Mean_Ratings\",ascending=False).head(10)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "metadata": {},
   "outputs": [],
   "source": [
    "# ANSWER : Hence the Beer you would like is :\n",
    "# \"American Double / Imperial Stout\" and \"Russian Imperial Stout\""
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 360x360 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Exploratory Data Analysis showing the linear variation of 2 features \"review_overall\" and \"review_appearance\"\n",
    "\n",
    "data_analysis=data.groupby(\"beer_style\").agg({\"review_overall\":[np.mean],\"review_appearance\":[np.mean]})\n",
    "\n",
    "data_analysis_review_overall = data_analysis[\"review_overall\",\"mean\"].values\n",
    "data_analysis_review_appearance = data_analysis[\"review_appearance\",\"mean\"].values\n",
    "\n",
    "plt.figure(figsize=(5, 5))\n",
    "plt.scatter(data_analysis_review_overall, data_analysis_review_appearance)\n",
    "plt.xlabel(\"review_overall\")\n",
    "plt.ylabel(\"review_appearance\")\n",
    "plt.title(\"review_overall vs review_appearance\")\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 360x360 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Exploratory Data Analysis showing the linear variation of 2 features \"review_aroma\" and \"review_appearance\"\n",
    "# Hence the \"review_appearance\" and the \"review_aroma\" vary linearly with the \"review_overall\".Also to be noticed is we don see any outliers between them\n",
    "\n",
    "data_analysis=data.groupby(\"beer_style\").agg({\"review_aroma\":[np.mean],\"review_appearance\":[np.mean]})\n",
    "\n",
    "data_analysis_review_overall = data_analysis[\"review_aroma\",\"mean\"].values\n",
    "data_analysis_review_appearance = data_analysis[\"review_appearance\",\"mean\"].values\n",
    "\n",
    "plt.figure(figsize=(5, 5))\n",
    "plt.scatter(data_analysis_review_overall, data_analysis_review_appearance)\n",
    "plt.xlabel(\"review_aroma\")\n",
    "plt.ylabel(\"review_appearance\")\n",
    "plt.title(\"review_aroma vs review_appearance\")\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Machine Learning Model"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 93,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Created a Machine Learning Model using Linear Regression to predict the \"overall_review\" from the \"review_appearence\" and \"review_aroma\"\n",
    "\n",
    "data_analysis=data.groupby(\"beer_style\").agg({\"review_overall\":[np.mean],\"review_appearance\":[np.mean],\"review_aroma\":[np.mean]})\n",
    "x1=data_analysis[\"review_appearance\",\"mean\"].values\n",
    "x2=data_analysis[\"review_aroma\",\"mean\"].values\n",
    "X=pd.DataFrame({'review_appearance':x1, 'review_aroma':x2})\n",
    "y=data_analysis[\"review_overall\",\"mean\"].values"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 94,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Imported the packages from sklearn and split the data into training set and testing set\n",
    "\n",
    "from sklearn.linear_model import LinearRegression\n",
    "from sklearn.model_selection import train_test_split\n",
    "linear_mod = LinearRegression()\n",
    "X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 95,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([0.54702055, 0.29718065])"
      ]
     },
     "execution_count": 95,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Fitted the trained model on to the data and then found the importance of the coefficients were the index 0 tells the importance of the feature \"review_appearence\" and index 2 tells the importance of the feature \"review_aroma\" on the model\n",
    "\n",
    "linear_mod=linear_mod.fit(X_train,y_train)\n",
    "linear_mod.coef_"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 96,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[3.8683109  3.82874263 3.92034304 3.9525288  3.77588256 3.61257747\n",
      " 3.78978464 4.00920857 3.56941548 3.55428223 3.17744039 3.98815535\n",
      " 3.79254266 3.55306603 3.73478108 3.7076994  2.96879552 3.93704188\n",
      " 3.82052506 3.71049651 3.6436801  4.02809384 3.82871991 4.04630953\n",
      " 3.63554359 3.88271031 3.53489999 3.94450882 3.90067775 3.67367374\n",
      " 3.97037424 3.99981532]\n"
     ]
    }
   ],
   "source": [
    "# Predicted the output of the model using the testing set\n",
    "\n",
    "prediction=linear_mod.predict(X_test)\n",
    "print(prediction)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 97,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Text(0,0.5,'prediction')"
      ]
     },
     "execution_count": 97,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Plotted a scatter plot of the y_test and predicted value,hence getting a linear variation between the 2 features \n",
    "\n",
    "plt.scatter(y_test,prediction)\n",
    "plt.xlabel('Y Test')\n",
    "plt.ylabel('prediction')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 98,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "MAE: 0.08882366811740286\n",
      "MSE: 0.013034759843502872\n",
      "RMSE: 0.1141698727489125\n"
     ]
    }
   ],
   "source": [
    "# Calculated the RMSE and MSE score indicating the Residual error is very small (i.e the difference between the actual output and predicted output is very small)\n",
    "\n",
    "from sklearn import metrics\n",
    "print('MSE:', metrics.mean_squared_error(y_test, prediction))\n",
    "print('RMSE:', np.sqrt(metrics.mean_squared_error(y_test, prediction)))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Hence from this model we can now in the future predict the \"review_overall\" score if the review_appearence\" and \"review_aroma\" features are known"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.6.7"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
